






eMAG & FD Marketplace
API Documentation v4.4.9
19.09.2025



Version
Date modified
Changes
4.4.0
26.04.2021
Added “source_language” key on product_offer/save for publishing product content in a different language than the platforms default
4.4.1
28.04.2021
Added voucher discounts distribution on order/read
4.4.2
16.06.2021
Added “detailed_payment_method” key on order/read
Added Draft publishing API details
Changed product ownership logic
4.4.3
08.12.2021
Added new API for reading commission at offer level 
Added “return_reason” and “observations” keys at product level on rma/read and rma/save
Changed reading_rma and saving_rma examples (7.4)
4.4.4
09.12.2021
Added “language” parameter on category/read  
4.4.5
11.03.2022
Added new filters on locality/read API
Removed “Matching products” section and API
4.4.6
03.10.2023
Additional info on product_offer/read and save
Added new “source_language”  values on product_offer/save 
Added “emag_club” key on product_offer/save
Added new “validation_status” values on product_offer/read: “Documentation update validation pending” and “Update rejected”
Added “genius_eligibility” key on product_offer/read
Added “dropoff_locker” key on awb/save
Added “locker_delivery_eligible” key on order/read
Removed the following keys from rma/read and rma/save: “customer_email”, “id” and ”invoice_number”
Added "recycle_warranties" key on order/read
Added new status for offers on product_offer/read and product_offer/save: 2 – End of life
Added additional explanations for offers available for sale
Added “tags” key on category/read
Added “tag” key on product_offer/save (on specific characteristics)
Added new callback: Approved product documentation
4.4.7
13.11.2024
Added MKTP FD RO route
Added “zipcode” key on locality/read
Added “unboxing” and “date” keys on awb/save
Removed “weight” key from product_offer/read and product_offer/save
Added "billing_locality_id" and "shipping_locality_id" keys on order/read
Additional explanation regarding awb/read_pdf added
Updated key name for locality/read: “country” became “country_code”
Updated key name for order/read: “cancellation_reason” became “reason_cancellation”
Added new order cancellation reasons
Added new keys for vouchers: “vat” and “offered_by”
Added new keys on order/read: “courier_external_office_id”, “enforced_vendor_courier_accounts”, “modified”
Added new endpoint, order/{orderId}/unlock-courier
Added new “genius_eligibility_type” key on product_offer/read
Added explanations for missing values for “validation_status” and “translation_validation_status”
Removed value = 7 (Rejected Association) for the above mentioned keys
Removed “original_sale_price” and “post_campaign_original_sale_price” keys from campaign_proposals/save
Added “voucher_discount” and “not_available_post_campaign” keys on campaign_proposals/save
Added missing values for “courier_account_properties”
Added “pickup_country_code” key on courier_accounts/read
Updated wrong “date” filter on rma/read => date_start and date_end
New API rate limits
Added information about future new keys for GPSR on product_offer/save (read): “safety_information”, “manufacturer”, “eu_representative” 
Added new pagination keys on category/read 
Added example requests regarding AWB issuing
4.4.8
28.08.2025
Updated MARKETPLACE_API_URL for FD RO
Added MKTP FD BG route
Added new endpoint, /api-3/smart-deals-price-check
Added "images_overwrite" key on product_offer/save
Added “green_tax” key on product_offer/save. The field is available only for eMAG RO platform.
Added “part_number” and “part_number_key” filters on product_offer/read
Updated key behaviour for “manufacturer” and “eu_representative" on product_offer/read
Added new value for ”validation_status” and “translation_validation_status” on product_offer/read
Added “errors” key on validation_status” and “translation_validation_status” keys on product_offer/read
Added “iso2” key on locality/read
Added “voucher_name” on order/read -> products -> product_voucher_split level
Added “serial_numbers” and “ext_part_number” on order/read -> products
Added “genius_computed” key on product_offer/read
Added “order_product_id” as property for order attachments
Added “date_intervals” key on campaign_proposals/save
Added “start_date” key on campaign_proposals/save
Added “start_date.date” key on campaign_proposals/save
Added “start_date.timezone_type key on campaign_proposals/save
Added “start_date.timezone” key on campaign_proposals/save
Added “end_date” key on campaign_proposals/save
Added “end_date.date” key on campaign_proposals/save
Added “end_date.timezone_type” key on campaign_proposals/save
Added “end_date.timezone” key on campaign_proposals/save
Added “voucher_discount” key on campaign_proposals/save
Added “index” key on campaign_proposals/save
Added “type” on api-3/awb/read
Added “type” on api-3/rma/save
Changed constraint of “type” on api-3/order/read and api-3/rma/read
Added “type” filter for return requests
4.4.9
19.09.2025
Added new API for search by EAN
Added new API for offer updates
Added new API for addresses
Added new field on awb/save: address_id
Added new field on attachments/read: order_type


Table of Contents
1.	eMAG Marketplace API	6
1.1.	Conventions	6
1.2.	Request, resources and actions	7
1.3.	Pagination and filters	8
1.4.	Response	8
1.5.	Rate limiting	9
1.6.	Callback URLs	10
2.	Publishing products and offers	10
2.1.	Reading categories, characteristics and family_types	11
2.2.	Reading VAT rates	14
2.3.	Reading Handling Time values	14
2.4.	Sending a new product	14
2.4.1.	Draft product	14
2.4.2.	Product	15
2.5.	Example for a new product	22
2.6.	Updating existing offer	23
2.6.1.	Updating an existing offer using product_offer/save	23
2.6.2.	Updating an existing offer using new light offer API offer/save	23
2.7.	Saving volume measurements on products	23
2.8.	Reading and counting products and offers	24
2.9.	Product validation responses	32
2.10.	Matching products by EAN	32
2.11.	Attaching offers on existing products	33
2.12.	Reading commission for an offer	37
3.	Updating stock	37
4.	Proposing offers in campaigns	38
4.1.	Smart Deals Badge	42
5.	Processing orders	42
5.1.	Order fields	42
5.1.1.	Product field in order details	47
5.1.2.	Customer fields in order details	50
5.1.3.	Order invoices and warranties	52
5.2.	Order notification, acknowledgment and order filters	53
5.3.	Order status matrix	53
5.4.	Order filters	54
5.5.	Updating orders	55
5.5.1.	Removing products from an order	55
5.5.2.	Adding products to an existng order	56
5.5.3.	Returned products and storno route	56
6.	Shipping orders	59
6.1.	Saving AWB	59
6.2.	Reading AWB	61
6.3.	Reading AWB PDF files	62
6.4.	Reading AWB ZPL type	63
6.5.	Counting Localities	64
6.6.	Reading Localities	64
6.7.	Reading courier accounts	65
6.8.	Reading addresses	66
7.	Processing return requests	67
7.1.	Return requests filters	71
7.2.	Status change permissions	71
7.3.	Return request deliveries	72
7.4.	Examples requests and responses	72
8.	Invoice API	72
8.1.	Reading invoice categories	72
8.2.	Reading invoice data	73
8.3.	Reading customer invoice data	75








eMAG Marketplace API
eMAG Marketplace API is developed by eMAG for Marketplace partners in order to allow them to use their own CRM’s / ERP’s. This document explains the methods for calling the API.
The API can be used in order to:	
	•	send products and offers
	•	process orders
Conventions
We define MARKETPLACE_API_URL constant of being the API URL of the platform (ex: https://marketplace-api.emag.ro/api-3)
We define MARKETPLACE_URL constant of being the URL of the platform (ex: https://marketplace.emag.ro)
We define DEFAULT_CURRENCY constant of being the default currency of the platform (ex: RON).
All API parameters are key-sensitive.
Platform
 eMAG Romania 
eMAG Bulgaria
MARKETPLACE_URL
https://marketplace.emag.ro
https://marketplace.emag.bg
MARKETPLACE_API_URL
https://marketplace-api.emag.ro/api-3
https://marketplace-api.emag.bg/api-3
Protocol
HTTPS
HTTPS
Locale
ro_RO
bg_BG
Default currency
RON
BGN

Platform
eMAG Hungary
FD Romania
MARKETPLACE_URL
https://marketplace.emag.hu
https://marketplace-ro.fashiondays.com
MARKETPLACE_API_URL
https://marketplace-api.emag.hu/api-3
https://marketplace-ro-api.fashiondays.com/api-3
Protocol
HTTPS
HTTPS
Locale
hu_HU
ro_RO
Default currency
HUF
RON

Platform
FD Bulgaria

MARKETPLACE_URL
https://marketplace-bg.fashiondays.com

MARKETPLACE_API_URL
https://marketplace-bg-api.fashiondays.com/api-3

Protocol
HTTPS

Locale
bg_BG

Default currency
BGN

To access the API, simply make a Basic Authorization request with your username, password and a base64 computed hash. Please note that user should be granted API rights in order to access the API.

$hash = base64_encode($username . ':' . $password);

Request, resources and actions
A Marketplace API call is represented by sending a request to API URL of platform. Every request consists of a POST to an URL like:
MARKETPLACE_API_URL/resource/action 
Ex: https://marketplace-api.emag.ro/api-3/product_offer/save
RESOURCES AND AVAILABLE ACTIONS
Resource
Resource URL
Available actions
product_offer
MARKETPLACE_API_URL/product_offer
read
save
count


measurements
MARKETPLACE_API_URL/measurements

save



offer_stock 
MARKETPLACE_API_URL/offer_stock/{resourceId}





campaign_proposals
MARKETPLACE_API_URL/campaign_proposals

save



order
MARKETPLACE_API_URL/api-3/order
read
save
count
acknowledge
unlock-courier
order/attachments
MARKETPLACE_API_URL/order/attachments

save



message
MARKETPLACE_API_URL/message
read
save
count


category
MARKETPLACE_API_URL/category
read

count


vat
MARKETPLACE_API_URL/vat
read




handling_time
MARKETPLACE_API_URL/handling_time
read




locality
MARKETPLACE_API_URL/locality
read

count


courier_accounts
MARKETPLACE_API_URL/courier_accounts
read




addresses
MARKETPLACE_API_URL/addresses
read




awb
MARKETPLACE_API_URL/awb
read
save



rma
MARKETPLACE_API_URL/rma
read
save
count


invoice/categories
MARKETPLACE_API_URL/api-3/invoice/categories
read




invoice
MARKETPLACE_API_URL/api-3/invoice
read




customer-invoice
MARKETPLACE_API_URL/api-3/customer-invoice
read




smart-deals-price-check
MARKETPLACE_API_URL/api-3/smart-deals-price-check
read





Below a code example using the resource "category" and the action "read"
Resource
Example
Context
category/read

http method: POST

The API needs authorization and has an IP level filtering. Before testing, sellers should provide a list of whitelisted IP’s. eMAG Marketplace will only allow API calls only from those IP’s.
The POST data consist of 1 mandatory key:
REQUEST
Key
Description
data
Data to be passed to the API. The following document will describe keys.

Pagination and filters
In order to limit the number of items returned, read actions accept pagination by passing to POST data following parameters:
PAGINATION
Key
Description
Default value
Example
currentPage
Set current page displayed
1
currentPage =3
itemsPerPage
Set number of items to be displayed in one page. Maximum is set to 100.
100
itemsPerPage=50
Also, filters can be included in POST to refine result set. Filters vary depending on the resource called and are exampled on every resource section.

Response
When an API call is made, the server MUST reply with a response. The response will ALWAYS be JSON formatted and the header 'Content-type: application/json' will always be passed.

RESPONSE
Key
Description
isError
Boolean value representing response status.
messages
Messages included in the response, like error messages, etc.
results
Results included in the response, mostly when reading resources.

IMPORTANT: Every API request must have a response and the response must contain the key “isError” and its value must be “false”. For each call that does not have the key and “false” value, we recommend setting up alerts, as the call most likely was not interpreted. We also recommend logging all calls and the corresponding API response for a 30 days period. Every request must have at most 4000 elements. If the call surpasses this limit the call will have a response with key “isError:true” and “message: Maximum input vars of 4000 exceeded”.
In the event of an documentation error when saving a product, the API will return and “isError:true” message, but the new offer will be saved and processed.

Rate limiting
All resources described at the table from paragraph 1.2 have the following limits: 
	•	Maximum 12 requests per second or 720 requests per minute for all orders routes
	•	All the other resources different from orders are limited to max. 3 requests per second or 180 requests per minute 
	•	Please note the limit for all other resources is cumulative, meaning that, for example, a stock update, an AWB creation and a price update will be counted together and compared to the rate limit threshold

	•	For optimal performance we recommend not scheduling requests at fixed hours. For example use 12:04:42 as a starting point instead of 12:00:00. The following responses are possible:

Time throttling limit is exceeded
Time throttling limit was not reached
HTTP/1.1 429
Date: Wed, 21 Mar 2018 08:22:44 GMT
Content-Type: application/json; charset=utf-8
Transfer-Encoding: chunked
X-RateLimit-Limit-3second: 1
X-RateLimit-Remaining-3second: 0
Server: kong/0.12.1
{"message":"API rate limit exceeded"}
HTTP/1.1 200
Date: Wed, 21 Mar 2018 08:23:52 GMT
Content-Type: application/json
Transfer-Encoding: chunked
X-RateLimit-Limit-3second: 1
X-RateLimit-Remaining-3second: 0
Server: nginx
{"isError":false,"messages":[],"results":[]}

Invalid requests will also be limited to the same maximum number of requests pe minute, as detailed above.

	•	For API resources that accept bulk save, the limit is 50 entities per request. For optimal performance we recommend using between 10 and 50 entities per request.
Callback URLs
The following callback URLs can be activated from the Marketplace interface: 
Context
Description
New order
You will be notified for each new order
Order cancellation
You will be notified whenever an order in canceled
New return & status change
You will be notified for each new return request and select status changes (New, Acknowledged & Received)
AWB status change
You will be notified for each AWB status change
Approved documentation
You will be notified when the product documentation is validated and received a PNK

Publishing products and offers
We define a draft product as a minimum set of details required to publish a product. The elements are: 
	•	Name
	•	Brand
	•	Part number
	•	Category (optional)
	•	EAN (optional)
	•	Source language (optional)

We define a product as a list of elements displayed for a product page. The elements are:
	•	Name
	•	Brand
	•	Part number
	•	Description
	•	Images
	•	Product characteristics (and product families)
	•	Category
	•	Barcodes (optional) 
	•	Other attachments (optional)
	•	EAN (required depending on Category) 
	•	Source language (optional)
	•	Safety information (optional)

We define an offer as a list of elements required for an offer to be available for a product. These elements are:
	•	Price
	•	Status
	•	VAT rate 
	•	Warranty
	•	Numerical stock
	•	Handling_time
	•	Manufacturer (optional)
	•	EU representative (optional)

eMAG Marketplace API allows a seller to:
	•	Send new products and offers
	•	Send new offers for existing eMAG products (sold by eMAG or any other seller) 
	•	Update existing own offers and/or products

	•	
Reading categories, characteristics and family_types
Every eMAG product has to be included in a certain category. Sellers cannot create new categories or change existing ones. Also, a seller can only post products and offers in its allowed categories list.
Reading categories without parameters will generate a response containing the first 100 categories. The read can be paginated thus obtaining a full list of categories. Only active categories will be returned.
When passing a category id, the API will return the category name and the list of available characteristics and their corresponding IDs, as well as the available product family_types and their corresponding IDs. Reading categories one by one is important as it is the only way to identify the restrictive characteristics and corresponding allowed values.
You can read the categories and their characteristics through the API.
Additional pagination filters for characteristic values:  
	•	valuesCurrentPage
	•	ValuesPerPage

Eg:    { "id": 15,
        "valuesCurrentPage":1,
        "valuesPerPage":10
    }

The resource is category and the available actions are read and count.

CATEGORY – read
Key – level 1
Key – level 2
Key – level 3
Description
Type
Example
id
 

Category eMAG id
Integer
id=604
name
 

Category name
String
name=”Music”
is_allowed


Indicates if the seller can send products and offers in the category.  In order to request access to a specific category, you can use the Marketplace interface.
0 = No 1 = Yes.
Integer
is_allowed=0
parent_id


Id of the parent category
Integer
parent = 12
is_ean_mandatory


Indicates if the sending an EAN is mandatory when saving products
	•	1 = mandatory
	•	0 = optional
Integer
is_ean_mandatory =1
is_warranty_mandatory


Indicates if adding warranty is mandatory when saving products
	•	1 = mandatory
	•	0 = optional
Integer
is_warranty_mandatory =1
characteristics
 

All characteristics available in category
List of arrays
 

id

Characteristic eMAG id
Integer
id=38

name

Characteristic name
String
name=”Audio”

type_id

Characteristic type. Indicates the type of values that a characteristic can accept.

Single value characteristics:
	•	1 = Numeric (ex: 20, 1, 30, 40, etc)
	•	60 = Size (ex. 36 EU, XL INTL, etc)
	•	20 = Boolean ( Yes, No, N/A)

Multiple values characteristics:
	•	2 = Numeric + unit of measure ( ex. 30 cm, 45 m, 20 GB, 30 inch, etc)
	•	11 = Text Fixed (max length 255 chars) (ex. Blue, Green, Laptop, Notebook, Copil, Man, Woman)
	•	30 = Resolution ( Width x Height ) (ex. 100 x 200, 640 x 480)  
	•	40 = Volume (Width x Height x Depth - Depth 2) (ex. 30 x 40 x 50 - 10)
Integer
type_id=11

display_order

Characteristic display order
Integer
display_order=6

is_mandatory

Indicates if the characteristic is mandatory when sending a product. Possible values are 0 (the characteristic is not mandatory) and 1 (the characteristic mandatory).
Integer
is_mandatory=0

is_filter

Indicates if the characteristic represents a filter in the website. Possible values are 0 (the characteristic is not filter) and 1 (the characteristic is a filter).
Integer
is_filter=1

allow_new_value

Indicates if the current characteristic allows you to submit new values that are automatically validated. 
Integer
allow_new_value=0

values

List the first 256 existing values of the current characteristic. Important: This key is available only when reading a single category.
Array
0 => 'Value 1'
1 => 'Value 2'

tags

List of all characteristic tags

Important: In the following months, characteristic  tags will be mandatory. 
Characteristic "Converted Size" (id 10770) will be removed and its value should be sent on characteristic "Size" (id 6506) - "converted" tag:
	•	{"id":6506,
	•	"tag":"original",
	•	"value":"36 EU"},
	•	{"id":6506,
	•	"tag":"converted",
	•	"value":"39 intl"}
Array
"tags": [    "original",    "converted" ]
family_types


List of all family types available in category
List of arrays


id

Family type id
Integer
Id=95

name

Family name
String
name=”Quantity”

characteristics

All characteristics of current family type
List of arrays



characteristic_id
Characteristic Id
Integer
characteristic_id=44


characteristic_family_type_id
Can only have 3 values, each corresponding to a different display method: “1" ="Thumbnails";  "2"="Combobox";  "3"="Graphic Selection"
Integer
characteristic_family_type_id=2


is_foldable
A foldable characteristic wraps all family members (with different characteristic values) as one item in the eMAG category listing
Integer
Is_foldable=1


display_order
Characteristic display order
Integer


By default responses will contain category names in the platform language but you can also send the language as a parameter, in case you want to receive category names in a specifc language. Available languages are: EN, RO, HU, BG, PL, GR and DE

E.g. https://marketplace-api.emag.ro/api-3/category/read?language=en

Reading VAT rates
When sending an offer, you have to send the VAT rate id by sending us a valid VAT id.
The resource is vat and the action is read. The API will return the list of available VAT rates and their corresponding id’s.

Reading Handling Time values
When sending an offer, you have to send the Handling Time by sending us a valid value.
The resource is handling_time and the action is read. The API will return the list of available handling_time values.

Sending a new product
Draft product
Sending a draft product requires you to send a smaller set of data for publishing a new product. The information is saved in eMAG platform and the necessary details for publishing a product can be added at any time. 

Please note: 
Draft products won’t be sent to eMAG Catalogue team for validation unless you send the other details necessary for publishing a new product (described below). 

If an EAN published on a draft product is found in the eMAG catalogue you can skip the product publishing process and attach the offer directly to existing product.

Details for sending a new draft can be found here.
Product 
Sending a product for the first time requires you to send the entire product documentation and all the offer data. Please note that creating new products implies human validation, so a new product will not be displayed in eMAG platform immediately.
The products that are not compliant with eMAG Documentation Standard will not pass the human validation; in this case you will be notified by our support team. The eMAG Documentation Standard that is available upon request for each category, and it contains the best practices for documenting a product.
Important: Content updates will be allowed only on products on which you are eligible (ownership = 1). For products on which you are not eligible (ownership = 2), any content updates will be rejected.

In order to send a new product, the resource is product_offer and the available action is save.
PRODUCT OFFER – save and create/update product
Key – level 1
Key – level 2
Description
Constraints
Example
id

Seller internal product id. This is the primary key for identifying a product offer.
Required. Integer value between 1 and 16777215.
id=243409
category_id

Product category eMAG id.
Required. Integer between 1 and 65535.
category _id=506
vendor_category_id

Seller internal category id.
Integer. Optional.
vendor_category_id=506
part_number_key

eMAG part_number_key. Used for attaching a product offer to an existing product in eMAG platform. If you want to create new product, don’t set this key.
Optional. String. Will be validated.
part_number_key=ES0NKBBBM
source_language

The language of the product content input.
If it differs from the platform local language, then the product will enter a translation process.
Available values for this key are: en_GB, ro_RO, pl_PL, bg_BG, hu_HU, de_DE, it_IT, fr_FR, es_ES, nl_NL, cs_CZ, ru_RU, el_GR, lt_LT, sk_SK, uk_UA
Optional. String.
Default value:
  on Marketplace RO: “ro_RO”
  on Marketplace BG: “bg_BG”
  on Marketplace HU: “hu_HU”
source_language=”de_DE”
name

Product name. Should be consistent with eMAG Product Documentation Standard.
Required. String between 1 and 255 characters long.
name=”Test product”
part_number

Manufacturer unique identifier of the product.
Required. String between 1 and 25 characters.
Important: 
The following characters will be automatically stripped:  
	•	spaces [ ]
	•	comma [ , ]
	•	semicolon [ ; ]
Example: “part number;” will be saved “partnumber”
part_number=”md788hc/a”
description

Product description. Should be consistent with eMAG Product Documentation Standard.
Optional. String between 1 and 16777215 characters. Can contain basic HTML tags.
description=”test”
brand

Brand name. Should be consistent with eMAG Product Documentation Standard.
Required. String between 1 and 255 characters.
brand=”Brand test”
force_images_download

Product images redownload flag. Use it only for updating product images without image link change.
0 - images will be downloaded only if the image link has changed
1 - force image download
Optional. Integer value, 1 or 0. Default = 0
force_images_download=1
images

Product images data array.
Optional. List of arrays.


display_type
Image display type.
1 – main image
2 – secondary image
0 – other images
Optional. Default value 0. Integer value between 0 and 2.
display_type=1

url
Seller image URL. Should be consistent with eMAG Product Documentation Standard. Max 6000px x 6000px and 8 Mb in size.
Required. String between 1 and 1024 characters. Valid URL. JPG, JPEG or PNG file type.
url=”http://valid-url.jpg”
images_overwrite

Used to append or overwrite the new images to the existing ones.
If the key is not provided, by default will:
	•	Append the images – if the seller is not documentation owner
	•	Overwrite the images – if the seller is documentation owner
Optional. Integer value with values: 0, 1.
1 = overwrite
0 = append
 images_overwrite:1
characteristics

Characteristic data. Note that characteristics have to be category valid (be part of category template). Should be consistent with eMAG Product Documentation Standard.
Optional. List of arrays.


id
Characteristic eMAG id.
Required. Integer value between 1 and 65535
id=24

value
Characteristic value. Should be consistent with eMAG Product Documentation Standard.
Required. String between 1 and 255 characters
value=”test”

tag
Characteristic tag value. Should be consistent with eMAG Product Documentation Standard.
Required only for characteristics which have tags on them. String between 1 and 255 characters.


If a characteristic has tags on the category read route, you need to send the same characteristic multiple times with different value for each tag.
	•	{"id":6506,
	•	"tag":"original",
	•	"value":"36 EU"},
	•	{"id":6506,
	•	"tag":"converted",
	•	"value":"39 intl"}
tag=”converted”
family

Family array. Used to create a new family, add a product to an existing family, or removing a product from a family.
Optional. Array.


id
The unique integer identifier of the family in your platform. If set to 0 (id=0), the product will be removed from its current family.
Required. Integer
Id=0

name
Required. Seller Family name.
Required if family id is not equal to 0;
name="Test product"

family_type_id
Required. eMAG Family type id that can be acquired by API (the resource is category and the action is read).
Required if family id is not equal to 0. Integer.
family_type_id=95
url

Product URL on the seller website.
Optional. String between 1 and 1024 characters.
url=”http://valid-url.html”
warranty

The warranty offered in months.
Required/Optional based on category. 
Default value:
- 0 (no warranty) if optional
- No default if required.
Integer between 0 and 255.

warranty=24
ean

Product barcode identifier (EAN -8, EAN-13, UPC-A, UPC-E, JAN, ISBN-10, ISBN-13, ISSN, ISMN-10, ISMN-13, GTIN-14). Please use the supplier barcode, not your internal barcodes.
Required/Optional based on category. No default value. Array of strings between 6 and 14 characters long. Only numeric figures allowed.
ean=Array('ean1', 'ean2')
attachments

Product attachments data. Max 10 Mb in size.
Optional. List of arrays.


id
Seller attachment internal id.
Optional. Integer value between 1 and 4294967295.
id=123

url
Seller attachment URL.
Required. String between 1 and 1024 characters. Valid URL to document.
url=”http://valid-url”
status

Seller offer status. 
2 – End of life
1 – status active
0 – status inactive
Required. Integer value, 0, 1, 2.
Obs. status=2 should be used only for update
status=1
sale_price

Seller offer sale price without VAT
Required. Decimal value greater than 0. Up to four decimals.
sale_price=51.6477
recommended_price

Seller offer recommended retail price before discount, without VAT. If set, the offer will be displayed as promo.
Optional. Decimal value greater than 0. Up to four decimals. Must be greater than sale_price.
recommended_price=51.6477
min_sale_price

Seller’s min offer sale price without VAT
Required on first product save. Decimal value greater than 0. Up to four decimals.
min_sale_price=40.6477
max_sale_price

Seller’s max offer sale price without VAT
Required on first product save. Decimal value greater than 0. Up to four decimals. Must be greater than min_sale_price.
max_sale_price=60.6477
currency_type

Offer currency. Only send the key if it is different from the local Marketplace currency. Available options: EUR or PLN
Optional. 3 characters string.
currency_type=”EUR”
stock

Offer available quantity array.
Required. List of arrays.
{
0=>{
warehouse_id=1,
value=20}}

warehouse_id
The id of the warehouse. Use warehouse_id=1 for only one warehouse. 
Required inside stock array. Integer.
warehouse_id=1

value
Offer available quantity.
Required inside stock array. Integer between 0 and 65535.
value=20
handling_time

Handling time array. If no array is sent, the products are shipped the same day they are received.
Optional. List of arrays.
{
0=>{
warehouse_id=1,
value=1}}

warehouse_id
The id of the warehouse. Use warehouse_id=1 for only one warehouse. 
Required inside handling_time array. Integer.
warehouse_id=1

value
Handling time, in number of days counted from the day the order was received. If handling_time = 0 the order will be shipped the same day it is received.
Required inside handling_time array. Integer value between 0 and 255. Default value = 0.
value=0
supply_lead_time

The number of days needed to restock the product, from order placement to the supplier or production order, until product reception in the warehouse. 
Available values for this key are: 2, 3, 5, 7, 14, 30, 60, 90, 120
Optional. Integer. 
Default value = 14
supply_lead_time=5
start_date

If it's a new offer, it represents the date your offer will be available from. For offer updates, it schedules value updates for the following data:
	•	sale_price
	•	recommended_price
	•	stock  
	•	handling_time  
	•	vat_id
	•	warranty 
	•	status
All other data will be updated on the fly. Using start_date, for example, you can schedule the inactivation of an offer, a price update, etc.
Optional. Text in YYYY-MM-DD format. Date can be as far as 60 days in the future (cannot be earlier than tomorrow). Cannot be null.
start_date=”2014-12-31”
vat_id
 
Seller offer VAT rate id.  Use /vat/read to display possible values.
Required. Integer. 
Ex: vat _id=1
emag_club

Indicates if you want your offer to be available or not in the eMAG Genius program. Only eligible offers will display Genius benefits to customers eMAG website even if you have chosen them to be available.
Optional. Integer value, 1 or 0. Default = 1
emag_club=1
safety_information

GPSR safety information. This will include any warnings contained in the product or any existing warnings that accompany the product. 
Optional. String between 1 and 16777215 characters.
safety_information = “Keep out of reach of children. Danger of suffocation.”
manufacturer

GPSR manufacturer information. Manufacturer information contains name, address and email address. 
We allow a maximum of 10 sets of information. The update on these fields will overwrite the existing information.
Optional. List of arrays.
This set of information is optional, but if it is provided, all corresponding fields (name, address, email) must be completed.
"manufacturer": [{  "name": "Company name Ltd.",   "address": "Company, city, street, number, country",     "email": "company@company.com"   }]

name
GPSR manufacturer information. The name of the manufacturer.
Required. String between 1 and 200 characters.


address
GPSR manufacturer information. The address of the manufacturer.
Required. String between 1 and 500 characters.


email
GPSR manufacturer information. The email address of the manufacturer.
Required. String between 1 and 100 characters.

eu_representative

GPSR EU representative information. Represents the EU based economic operator ensuring the product complies with the required regulations, in case the manufacturer is not based in the EU.
If the manufacturer is based in EU, you can submit the manufacturer details.
 The information provided will include the name, address and e-mail address. 
We allow a maximum of 10 sets of information. The update on these fields will overwrite the existing information.
Optional. List of arrays.
This set of information is optional, but if it is provided, all corresponding fields (name, address, email) must be completed.

"eu_representative": [{  "name": "Company name Ltd.",     "address": "Company, city, street, number, country",     "email": “company@company.com”
  }]

name
GPSR EU representative information. The name of the EU based economic operator.
Required. String between 1 and 200 characters.



address
GPSR EU representative information. The address of the EU based economic operator.
Required. String between 1 and 500 characters.



email
GPSR EU representative information. The email address of the EU based economic operator.
Required. String between 1 and 100 characters.

green_tax

The value for Green tax that you want to set on offer and that will be displayed in site. This value includes VAT.
The value can be set only for eMAG RO platform.
Optional. Decimal value >= 0. Up to four decimals. 

green_tax=10

IMPORTANT:
	•	During campaings with stock in site we will not allow the following:
	•	regular offer updates;
	•	updates sent during campaign time that have a start_date in the future;
	•	previously scheduled updates with start_date during campaign time.
	•	You can save an offer update with currency_type different from the local Marketplace currency and start_date before the end of the current month. Any update attempt with a start_date greater than the last day of the current month will be rejected.
	•	Be aware that prices published directly in the local Marketplace currencies will be overwritten by prices published in other currencies when these are recalculated and published automatically on FX change at the beginning of every month. The automated recalculation can be disabled on request.
	•	Min / Max sale price keys are used for price check purposes and are mandatory for all calls used to create product/offers for the first time. As a best practice we recommend sending these keys only when you want to change their values.
	•	Sale price will be validated against min_sale_price and max_sale_price. Any offer that is not within the specified range will be rejected.
	•	In order to change a previously sent product image or attachment the url should be different from the one already sent. We reload the images only if the URL differs.
	•	We recommend sending the product data only upon product create/update, as there is no need to resend product unless it changed. Also we recommend sending the offer data upon changing (no matter the frequency) and at least weekly (even if the offer is the same) rather using periodical sending (crons, agents).  You should program marketing campaigns using “start_date” campaign. Also please offer the possibility for an offer to be attached to an existing eMAG product (using part_number_key).
	•	The product part number should be assigned to a single product.
If a product part number is re-used (set on a second product) an error will be generated and the product will NOT be saved.
	•	Multiple EAN codes can be set on an offer, but one EAN product code can NOT be used on two or more products.
If one EAN code is added on a second new product, an error will be generated and the product will NOT be saved.
If one EAN code used on a new product is already linked to a product in the eMAG catalogue, the offer will be automatically associated to that existing product.
	•	In the event of an documentation error when saving a product, the API will return and “isError:true” message, but the new offer will be saved and processed.
	•	When adding a product to a family
	•	The category id of a product and the category id of its family type (family_type_id) must be the same.
	•	All characteristics that define a family must be present and must have a valid value
	•	All characteristics that define a family must have a single value
	•	If a family is not valid, you will receive a warning response, but the product will be saved/updated
	•	When moving a product from one family to another you only have to send the product with its new family type, id and name and make sure you follow the same rules as above

Example for a new product
Resource
Example
Context
product_offer/save

http method: POST




Updating existing offer
Updating an existing offer using product_offer/save 
When updating an existing offer for a product, you should send only the offer, without the documentation. Mandatory when updating a product offer are the following keys:
	•	id
	•	status
	•	sale_price
	•	vat_id
	•	handling_time
	•	stock
Please note that although the API permits sending the entire documentation on each offer update (price change, out-of-stock change, etc.) we do not recommend or encourage such a practice.
If you need to deactivate a valid offer on the website, you should send the offer with the “status = 0”.
Updating an existing offer using new light offer API offer/save
This endpoint allows you to update existing offers on the eMAG platform by changing only offer-specific data and cannot be used to create new offers or modify product information.
API Details:
Mandatory key: id 
Optional keys:
sale_price
recommended_price
min_sale_price
max_sale_price
currency_type
stock
handling_time
vat_id
status
Note that only the fields you want to update need to be included in the request.
Resource
Example
Context
offer/save

http method: POST

Saving volume measurements on products
In order to save volume measurements on existing products, the resource is measurements and the available action is save. The measurement units for volume are millimeters and grams. 
MEASUREMENTS – save 
Key – level 1
Description
Constraints
Example
id
Seller internal product id. This is the primary key for identifying a product offer.
Required. Integer value between 1 and 16777215.
id=243409
length
The length of the product in millimeters (mm)
Required. Decimal value between 0 and 999999. Up to two decimals.
length=100
width
The width of the product in millimeters (mm)
Required. Decimal value between 0 and 999999. Up to two decimals.
width=122.50
height
The height of the product in millimeters (mm)
Required. Decimal value between 0 and 999999. Up to two decimals.
height=250
weight
The weight of the product in grams (g)
Required. Decimal value between 0 and 999999. Up to two decimals.
weight=1254.50

Resource
Example
Context
measurements/save

http method: POST


Reading and counting products and offers
In order to check the existing products (offers) and their status, the resource is product_offer and the available action are read and count.
Important: When reading products, only your own content input on the product will be returned.


PRODUCT_OFFER – read
Key – level 1
Key – level 2
Description
Type
Example
part_number_key
 
eMAG part_number_key.
String
part_number_key=ES0NKBBBM
number_of_offers

How many sellers have active offers on this product
Integer
number_of_offers=3
buy_button_rank

The rank of the offer in its race to win the <Add to cart> button
Integer
buy_button_rank=1
best_offer_sale_price

Best selling price available in eMAG for the same Product
Decimal
best_offer_sale_price=51.6477
best_offer_recommended_price

The corresponding recommended price for the offer holding the best selling price
Decimal
best_offer_recommended_price=54.6477
ownership

Indicates who has ownership on the product’s documentation. Posible values:
1 – Eligible for content updates
2 – Not eligible for content updates
Integer
ownership=1
category_id
 
Product category eMAG id.
Integer
category _id=506
vendor_category_id

Seller internal category id.
Integer
vendor_category_id=506
id

Seller internal product id. This is the primary key for identifying a product offer.
Integer
id=243409
brand

Product brand name.
String
brand=”Brand test”
name

Product name.
String
name=”Test product”
part_number

Product part number.
String
part_number=”md788hc/a”
sale_price

Seller offer sale price without VAT
Decimal
sale_price=51.6477
recommended_price

Seller offer recommended retail price before discount, without VAT.
Decimal
recommended_price=54.6477
currency

Product price currency.
String
currency='RON'
description

Product description.
String
description=”test”
url

Product URL on the seller website.
String
url=”http://valid-url.html”
warranty

The warranty offered in months.
Integer
warranty=24
ean

Product barcode identifier (EAN -8, EAN-13, UPC-A, UPC-E, JAN, ISBN-10, ISBN-13, ISSN, ISMN-10, ISMN-13, GTIN-14).
Array
ean=Array('ean1', 'ean2')
general_stock

The sum of the stock on all seller warehouses. Is decremented and incremented when orders are processed.
Integer
general_stock=20
estimated_stock

This key takes into account the reserved stock on unacknowledged orders.
Integer
estimated_stock=20
status

Seller offer status. 
2 – end of life
1 – status active
0 – status inactive
Integer
status=1
images


List of arrays


url
Seller image URL.
String
url=”http://valid-url.jpg”

display_type
Image display type.
1 – main image
2 – secondary image
0 – other images
Integer
display_type=1
characteristics
 
All characteristics available in category
List of arrays
 

id
Characteristic eMAG id
Integer
id=38

value
Characteristic value.
String
value=”test”
vat_id

Seller offer VAT rate id.
Integer
vat _id=1
family

Product family.
Array


id
Family id.
Integer
id=295

name
Family name.
String
name=”Test family”
handling_time


List of arrays


warehouse_id
The id of the warehouse.
Integer
warehouse_id=1

value
Handling time, in number of days counted from the day the order was received.
Integer
value=0





validation_status

Product validation status
List of arrays


value
Product validation status value
Integer
value=4

Description
Product validation status description
String
Description=”Rejected documentation”

errors
Feedback received on product documentation.
List of arrays

translation_validation_status

Product validation status with details included for products sent with different source language 
List of arrays


value
Product validation status value
Integer
value=4

Description
Product validation status description
String
Description=”Rejected documentation”

errors
Feedback received on product documentation.
List of arrays

offer_validation_status

Offer validation status
List of arrays


value
Offer validation status value
Integer
value=2

Description
Offer validation status description
String
Description=”Invalid price”
genius_eligibility

Indicates if the offer is eligible for Genius program.
Integer
genius_eligibility = 1
genius_eligibility_type

Indicates the type of Genius for which the offer is eligible:
1 – Genius Full
2 – Genius EasyBox
3 – Genius HD
Integer
genius_eligibility_type = 2
genius_computed

Indicates offer's Genius type for offers active in Genius
0 – offer not active in Genius
1 – offer active in Genius Full
2 – offer active in Genius EasyBox
3 –  offer active in Genius HD
Integer
genius_computed = 2
manufacturer

GPSR manufacturer completion flag which indicates if the GPSR info is present on product. This flag is returned when reading products without filtering. If you need to read manufacturer info, you need to filter for a specific product.
Boolean.
manufacturer = true
manufacturer

GPSR manufacturer information. Manufacturer information contains name, address and email address. 

List of arrays.

"manufacturer": [{  "name": "Company name Ltd.",   "address": "Company, city, street, number, country",     "email": "company@company.com"   }]

name
GPSR manufacturer information. The name of the manufacturer.
String.


address
GPSR manufacturer information. The address of the manufacturer.
String.


email
GPSR manufacturer information. The email address of the manufacturer.
String.

eu_representative

GPSR EU representative completion flag which indicates if the GPSR info is present on product. This flag is returned when reading products without filtering. If you need to read EU representative info, you need to filter for a specific product.
Boolean.
eu_representative = true
eu_representative

GPSR EU representative information. Represents the EU based economic operator ensuring the product complies with the required regulations, in case the manufacturer is not based in the EU. The information provided will include the name, address and e-mail address. 
 List of arrays.

"eu_representative": [{  "name": "Company name Ltd.",     "address": "Company, city, street, number, country",     "email": “company@company.com” }]

name
GPSR EU representative information. The name of the EU based economic operator.
String.


address
GPSR EU representative information. The address of the EU based economic operator.
String.



email
GPSR EU representative information. The email address of the EU based economic operator.
String.

safety_information

GPSR safety information. This will include any warnings contained in the product or any existing warnings that accompany the product. 
 String.
safety_information = “Keep out of reach of children. Danger of suffocation.”

The following filters are available when counting and reading products and offers:
Key
Description
Constraints
id
Displays the details for the corresponding ext_id.
Optional. Integer value between 1 and 4294967295.
currentPage
Set current page displayed
Optional, integer. Ex: currentPage =3
itemsPerPage
Set number of items to be displayed in one page. Maximum is set to 100.
Optional, integer. itemsPerPage=50
status
Returns only the offers with this status.
Optional. Seller offer status. 1 – status active
0 – status inactive
part_number
Displays the details for the corresponding part_number.
Optional.
Ex: part_number = 12334
part_number_key
Displays the details for the corresponding part_number_key.

Optional.
Ex: part_number_key = D9T0KBMBM
general_stock
Returns only offers with numerical general_stock that have a value between 0 and the input.
Optional general_stock = 3
estimated_stock
Returns only offers with numerical estimated_stock that have a value between 0 and the input.
Optional reserved_stock = 3
offer_validation_status
Returns only the results with this validation status.
Optional.  1 = Saleable
2 = Invalid price
validation_status
Returns only the results with this validation status.
Optional.  1 = Awaiting MKTP validation 2 = Awaiting Brand validation 3 = Awaiting EAN validation 4 = Awaiting Documentation Validation 5 = Rejected Brand 6 = Rejected EAN 8 = Rejected Documentation
9 = Approved Documentation
10 = Blocked
11 = Documentation update validation pending
12 = Update rejected
translation_validation_status
Returns only the results with this validation status.
Optional.  1 = Awaiting MKTP validation 2 = Awaiting Brand validation 3 = Awaiting EAN validation 4 = Awaiting Documentation Validation 5 = Rejected Brand 6 = Rejected EAN 8 = Rejected Documentation
9 = Approved Documentation
10 = Blocked
11 = Documentation update validation pending
12 = Update rejected
13 = Waiting for salable offer
14 = Unsuccessful translation
15 = Translation in progress
16 = Translation pending
17 = Partial translation

Reading products will always return the values sent by sellers.

In order to be available for selling, an offer has to meet the following conditions:
	•	Stock > 0
	•	Seller status should be active
	•	All 3 keys (“status”,”offer_validation_status”, “validation_status”) should have values that allows availability, see details below:
Key
Status
Availability
Description
“status”:0
Inactive/Auto-inactivated
Not allowed
The status can be set by the seller on the offers temporary unavailable. The status can be also set based on losing access in the category, losing an EAN conflict, etc
“status”:1
Active
Allowed
The status is set by the seller when they want to sell the offer.
“status”:2
EOL/ Auto EOL
Not allowed
The status that can be set by the seller on the offers that does not want to sell them anymore. The status can be also set based on the Auto EOL flow.
“offer_validation_status”-> ”value”:1
Valid
Allowed
Feedback based on price check. If the value =1, means that price is valid and the offer can be sell.
“offer_validation_status”:-> “value”:2
Invalid price
Not allowed
Feedback based on price check. If the value =2, means that price is not valid and the offer cannot be sell until the price is manually validated.
“validation_status”-> ”value”:0
Draft
Not allowed
Newly documented product that does not contain all the necessary details to be sent to validation. Check the feedback received on errors key.
“validation_status”:-> “value”:1
In MKTP validation
Not allowed
This value is applied on new products that needs MKTP validation in order to be sent to eMAG systems.
“validation_status”:-> “value”:2
Awaiting Brand validation
Not allowed
The product is in validation and is pending for the  brand to be validated by eMAG system.
“validation_status”:-> “value”:3
Waiting for EAN approval
Allowed
This value signals the presence of an EAN conflict, but does not influence the availability of an offer until it is resolved.
“validation_status”:-> “value”:4
New documentation validation pending
Not allowed
Newly documented product that has not been finalized/validated. 
“validation_status”:-> “value”:5
Rejected Brand
Not allowed
The product documentation is rejected because of the provided brand. Update the product with correct brand.
“validation_status”:-> “value”:6
Invalid product – EAN rejected
Not allowed
The product has lost an EAN conflict and the offer has been inactivated (“status”:0)
“validation_status”:-> “value”:8
Documentation rejected
Not allowed
Newly documented product that does not meet the criteria and requires correction to the documentation.
“validation_status”:-> “value”:9
Approved documentation
Allowed
The product is documented, approved and can be sold if it has a saleable offer attached. For this status, there may be exceptions in the case of automatically translated products, as they are not published on the site even though they have this status. Please check “translation_validation_status” key which allows a greater granularity to identify the translated products.
“validation_status”:-> “value”:10
Blocked
Not allowed
The offer for these products has been blocked from sale by an admin or an automatic flow, such as Product health or OPC. In order to be unblocked,  It requires the validation by an admin.
“validation_status”:-> “value”:11
Update awaiting approval
Allowed
Documented and approved product that can be sold, but for which the validation of some updates sent by the seller is pending. For this status, there may be exceptions in the case of automatically translated products, as they are not published on the site even though they have this status. Please check “translation_validation_status” key which allows a greater granularity to identify the translated products.
“validation_status”:-> “value”:12
Update rejected
Allowed
Documented and approved product that can be sold, but for which the validation of some updates sent by the seller were rejected.
“translation_validation_status”-> ”value”:0
Draft
Not allowed
Newly documented product that does not contain all the necessary details to be sent to validation. Check the feedback received on errors key.
“translation_validation_status”:-> “value”:1
In MKTP validation
Not allowed
This value is applied on new products that needs MKTP validation in order to be sent to eMAG systems.
“translation_validation_status”:-> “value”:2
Awaiting Brand validation
Not allowed
The product is in validation and is pending for the  brand to be validated by eMAG system.
“translation_validation_status”:-> “value”:3
Waiting for EAN approval
Allowed
This value signals the presence of an EAN conflict, but does not influence the availability of an offer until it is resolved.
“translation_validation_status”:-> “value”:4
New documentation validation pending
Not allowed
Newly documented product that has not been finalized/validated.
“translation_validation_status”:-> “value”:5
Rejected Brand
Not allowed
The product documentation is rejected because of the provided brand. Update the product with correct brand.
“translation_validation_status”:-> “value”:6
Invalid product – EAN rejected
Not allowed
The product has lost an EAN conflict and the offer has been inactivated (“status”:0)
“translation_validation_status”:-> “value”:8
Documentation rejected
Not allowed
Newly documented product that does not meet the criteria and requires correction to the documentation.
“translation_validation_status”:-> “value”:9
Approved documentation
Allowed
The product is documented, approved and can be sold if it has a saleable offer attached.
“translation_validation_status”:-> “value”:10
Blocked
Not allowed
The offer for these products has been blocked from sale by an admin or an automatic flow, such as Product health or OPC. In order to be unblocked,  It requires the validation by an admin.
“translation_validation_status”:-> “value”:11
Update awaiting approval
Allowed
Documented and approved product that can be sold, but for which the validation of some updates sent by the seller is pending.
“translation_validation_status”:-> “value”:12
Update rejected
Allowed
Documented and approved product that can be sold, but for which the validation of some updates sent by the seller were rejected.
“translation_validation_status”:-> “value”:13
Waiting for salable offer
Not allowed
In order for the translation to be prioritized, make sure that the offer has stock and is active
“translation_validation_status”:-> “value”:14
Unsuccessful translation
Not allowed
Translation request for new product that does not meet the criteria and requires correction to the documentation.
“translation_validation_status”:-> “value”:15
Translation in progress
Not allowed
Automatic translated product, with PNK, not yet displayed on customer website, which is now in the process of manual translation
“translation_validation_status”:-> “value”:16
Translation pending
Not allowed
New product translation request which waits processing
“translation_validation_status”:-> “value”:17
Partial translation

Allowed
Automatic translated product with PNK, already published to cutomer website

Product validation responses
After reading a product, all the elements previously sent are returned, along with the key doc_errors. The key is not null for products that were rejected due to improper documentation. Below the list of possible errors, when they occur and the possible actions you need to take.



Matching products by EAN
To simplify and speed up the offer association process, we’ve launched a new API endpoint. With this enhancement, you can now search directly by EAN codes to quickly check if your products already exist on eMAG. This means faster, more accurate, and easier offer associations.

EAN reading - request
Key – level 1
Description
Type
Example
eans
EANs
Array of strings
eans[]=7086812930967&eans[]=5904862975146

EAN reading - response
Key – level 1
Description
Type
Example
eans
European Article Numbers
String
5904862975146
part_number_key
eMAG part_number_key.
String
DY74FJYBM
product_name
Product name
String
Tenisi barbati, Sprandi, 590486297490344, Sintetic, 44 EU, Negru
brand_name
Brand name
String
Sprandi
category_name
Category name
String
Men Trainers
doc_category_id
Category id (doc template id)
Integer
2735
site_url*
eMAG product site URL
String
http://emag.ro/product_details/pd/DY74FJYBM
allow_to_add_offer
Seller has access in category
Boolean
true
vendor_has_offer
Seller has an offer on this product
Boolean
false
hotness
Product performance
String
SUPER COLD
product_image
The main image 150x150
String
https://s13emagst.akamaized.net/products/15566/15565152/images/res_50a7b8ffc4ea179f6b63e6d50810e8de.png?width=150&height=150&hash=6A5AE673361E590A60A27E86CED60A5B
* Not included in Fashion Days responses

Usage details:
EAN limit: up to 100 codes per request. If more are submitted, only the first 100 will be processed, and a notification message will be returned.
Rate details:
5 requests/second
200 requests/minute
5.000 requests/day
 Examples of requests and responses
Resource
Example
Context
documentation/find_by_eans

http method: GET


Attaching offers on existing products
The attaching action can be done via product_offer/save route.
You can choose between using PNK (part_number_key) or EAN for attaching offers on existing eMAG products. 
If the product already exists in eMAG catalog, just add the key “part_number_key” with product’s part_number_key or the “ean” key with a single EAN.
IMPORTANT:
Only one offer can be attached to an existing product (identified by a “part_number_key”) in eMAG catalogue.
In case you try to attach a second offer to a “part_number_key” that already has one of your offers attached, an error will be generated and the offer will NOT be saved.
If you already have an offer attached to a “part_number_key” please update it instead of trying to attach a new one.

The part_number_key is the last key found in the URL of an eMAG product. It will ALWAYS have both numbers and characters. Ex: for product http://www.emag.ro/telefon-mobil-nokia-105-black-105-black/pd/D5DD9BBBM/ the part_number_key is D5DD9BBBM.


PRODUCT OFFER – save and create/update product
Key – level 1
Key – level 2
Description
Constraints
Example
id

Seller internal product id. This is the primary key for identifying a product offer.
Required. Integer value between 1 and 16777215.
id=243409
name

Product name. Should be consistent with eMAG Product Documentation Standard.
Required. String between 1 and 255 characters long.
name=”Test product”
ean

Product barcode identifier (EAN -8, EAN-13, UPC-A, UPC-E, JAN, ISBN-10, ISBN-13, ISSN, ISMN-10, ISMN-13, GTIN-14). Please use the supplier barcode, not your internal barcodes.
Required if part_number_key is not present. No default value. Array of strings between 6 and 14 characters long. Only numeric figures allowed.
OBS: “part_number_key” and “ean” keys are mutually exclusive, you should use one or the other.
ean=Array('ean1')
part_number_key

eMAG part_number_key. Used for attaching a product offer to an existing product in eMAG platform. If you want to create new product, don’t set this key.
Required if ean is not present. String. Will be validated 
OBS: “part_number_key” and “ean” keys are mutually exclusive, you should use one or the other.
part_number_key=ES0NKBBBM
status

Seller offer status. 
1 – status active
0 – status inactive
Required. Integer value, 1 or 0.
status=1
sale_price

Seller offer sale price without VAT
Required. Decimal value greater than 0. Up to four decimals.
sale_price=51.6477
recommended_price

Seller offer recommended retail price before discount, without VAT. If set, the offer will be displayed as promo.
Optional. Decimal value greater than 0. Up to four decimals. Must be greater than sale_price.
recommended_price=51.6477
min_sale_price

Seller’s min offer sale price without VAT
Required on first product save. Decimal value greater than 0. Up to four decimals.
min_sale_price=40.6477
max_sale_price

Seller’s max offer sale price without VAT
Required on first product save. Decimal value greater than 0. Up to four decimals. Must be greater than min_sale_price.
max_sale_price=60.6477
currency_type

Offer currency. Only send the key if it is different from the local Marketplace currency. Available options: EUR or PLN
Optional. 3 characters string.
currency_type=”EUR”
vat_id
 
Seller offer VAT rate id.  Use /vat/read to display possible values.
Required. Integer. 
Ex: vat _id=1
stock

Offer available quantity array.
Required. List of arrays.
{
0=>{
warehouse_id=1,
value=20}}
stock
warehouse_id
The id of the warehouse. Use warehouse_id=1 for only one warehouse. 
Required inside stock array. Integer.
warehouse_id=1
stock
value
Offer available quantity.
Required inside stock array. Integer between 0 and 65535.
value=20
handling_time

Handling time array. If no array is sent, the products are shipped the same day they are received.
Optional. List of arrays.
{
0=>{
warehouse_id=1,
value=1}}
handling_time
warehouse_id
The id of the warehouse. Use warehouse_id=1 for only one warehouse. 
Required inside handling_time array. Integer.
warehouse_id=1
handling_time
value
Handling time, in number of days counted from the day the order was received. If handling_time = 0 the order will be shipped the same day it is received.
Required inside handling_time array. Integer value between 0 and 255. Default value = 0.
value=0
start_date

If it's a new offer, it represents the date your offer will be available from. For offer updates, it schedules value updates for the following data:
	•	sale_price
	•	recommended_price
	•	stock  
	•	handling_time  
	•	vat_id
	•	warranty 
	•	status
All other data will be updated on the fly. Using start_date, for example, you can schedule the inactivation of an offer, a price update, etc.
Optional. Text in YYYY-MM-DD format. Date can be as far as 60 days in the future (cannot be earlier than tomorrow). Cannot be null.
start_date=”2014-12-31”
warranty

The warranty offered in months.
Required/Optional based on category. 
Default value:
- 0 (no warranty) if optional
- No default if required.
Integer between 0 and 255.
warranty=24
manufacturer

GPSR manufacturer information. Manufacturer information contains name, address and email address. 
 The information provided will include the name, address and e-mail address. 
We allow a maximum of 10 sets of information. The update on these fields will overwrite the existing information.
Optional. List of arrays.
This set of information is optional, but if it is provided, all corresponding fields (name, address, email) must be completed.
"manufacturer": [{  "name": "Company name Ltd.",   "address": "Company, city, street, number, country",     "email": "company@company.com"   }]

name
GPSR manufacturer information. The name of the manufacturer.
Required. String between 1 and 200 characters.


address
GPSR manufacturer information. The address of the manufacturer.
Required. String between 1 and 500 characters.


email
GPSR manufacturer information. The email address of the manufacturer.
Required. String between 1 and 100 characters.

eu_representative

GPSR EU representative information. Represents the EU based economic operator ensuring the product complies with the required regulations, in case the manufacturer is not based in the EU. The information provided will include the name, address and e-mail address. 
If the manufacturer is based in EU, you can submit the manufacturer details.
 The information provided will include the name, address and e-mail address. 
We allow a maximum of 10 sets of information. The update on these fields will overwrite the existing information.

Optional. List of arrays.
This set of information is optional, but if it is provided, all corresponding fields (name, address, email) must be completed.

"eu_representative": [{  "name": "Company name Ltd.",     "address": "Company, city, street, number, country",     "email": “company@company.com”
  }]

name
GPSR EU representative information. The name of the EU based economic operator.
Required. String between 1 and 200 characters.



address
GPSR EU representative information. The address of the EU based economic operator.
Required. String between 1 and 500 characters.



email
GPSR EU representative information. The email address of the EU based economic operator.
Required. String between 1 and 100 characters.


Resource
Example
Context
product_offer/save

http method: POST


Reading commission for an offer
In order to read the estimated commission for an offer, a new REST API is available. Please consult the API Swagger.

Updating stock
In order to update only the stock of an offer a REST resource is available
Resource
Resource URL
Method
Authorization
Headers
Parameters
offer_stock
MARKETPLACE_API_URL/offer_stock/{resourceId}
PATCH
Basic (Base64)
Content-Type application/json
resourceId

The resourceId parameter represents the Seller internal product id. This is the primary key for identifying a product offer.

Resource
Example
Context
offer_stock

http method: PATCH


Proposing offers in campaigns

To propose a valid offer in a campaign the resource is campaign_proposals and the available action is save.

Proposing offers in campaigns
Key – level 1
Key – level 2
Key – level 3
Description
Constraints
Example
id


Seller internal product id. This is the primary key for identifying a product offer.
Required. Integer value between 1 and 16777215.
id=243409
sale_price


Seller offer sale price without VAT available in the campaign
Required. Decimal value greater than 0. Up to four decimals.
sale_price=51.6477
stock


Available stock for the campaign. Once the stock has finished, the product can no longer be ordered.

Required. Integer value between 0 and 255.
stock=1
max_qty_per_order


The maximum quantity that a customer can order for a product from the campaign. This column is mandatory for stock in site campaigns.
Required/Optional depending on campaign type. List of arrays.
max_qty_per_order=4
post_campaign_sale_price


Product price after campaign end. The automatically filled price is the sale price of the product from the moment when offers are downloaded.
Optional. Decimal. Up to four decimals.
post_campaign_sale_price=55.6477
campaign_id


eMAG internal campaign ID in which the proposal will be uploaded
Required. Integer value between 1 and 16777215.
campaign_id=344
not_available_post_campaign


If it`s not completed, the offer will remain valid after campaign end and if it`s filled with "1", the offer will no longer be active and valid after campaign end.
Optional. Integer value. 0 or 1.
not_available_post_campaign=1
not_available_post_campaign


If it`s not completed, the offer will remain valid after campaign end and if it`s filled with "1", the offer will no longer be active and valid after campaign end.
Optional. Integer value. 0 or 1.
not_available_post_campaign=1
voucher_discount


Value of the voucher discount proposed in campaign. It should be minimum 10 (%).  You are free to decide indepedently the value of the voucher.
Optional/Required depending on campaign type. Integer value.

Maximum allowed value is 100.
voucher_discount=10
date_intervals


A list of date intervals for which different discounts apply during the campaign. Each interval is an object with specific properties.
Optional/Required depending on campaign type. List of arrays.
For MultiDeals campaigns is required
date_intervals": [
      {
        "start_date": {
          "date": "2025-04-21 00:00:00.000000",
          "timezone_type": 3,
          "timezone": "Europe\\/Bucharest"
        },
        "end_date": {
          "date": "2025-04-22 23:59:59.000000",
          "timezone_type": 3,
          "timezone": "Europe\\/Bucharest"
        },
        "voucher_discount": 10,
        "index": 1
      }


start_date


The start of the discount interval. Contains full timestamp and timezone metadata.
Optional/Required depending on campaign type.
For MultiDeals campaigns is required
 Object
"start_date": {
          "date": "2025-04-21 00:00:00.000000",
          "timezone_type": 3,
          "timezone": "Europe\\/Bucharest"
        }


date
The start timestamp of the interval, in YYYY-MM-DD HH:MM:SS.ssssss format.
Optional/Required depending on campaign type.
For MultiDeals campaigns is required
 String
"date": "2025-04-22 23:59:59.000000",


timezone_type
Timezone type identifier (e.g., 3 for Europe/Bucharest).
Optional. Integer

"timezone_type": 3


timezone
Timezone name string (e.g., "Europe/Bucharest").

Optional. String

"timezone": "Europe\\/Bucharest"


end_date


The end of the discount interval. Structure identical to start_date.
Optional/Required depending on campaign type. 
For MultiDeals campaigns is required 
Object

        "end_date": {
          "date": "2025-04-22 23:59:59.000000",
          "timezone_type": 3,
          "timezone": "Europe\\/Bucharest"
        }



date
The end timestamp of the interval, in YYYY-MM-DD HH:MM:SS.ssssss format.
Optional/Required depending on campaign type. 
For MultiDeals campaigns is required 
String

"date": "2025-04-23 00:00:00.000000",


timezone_type
Timezone type identifier (e.g., 3 for Europe/Bucharest).
Optional. Integer

"timezone_type": 3


timezone
Timezone name string (e.g., "Europe/Bucharest").

Optional. String

"timezone": "Europe\\/Bucharest"

voucher_discount

The discount percentage to be applied during this interval (e.g., 10 for 10%).
Optional/Required depending on campaign type. 
For MultiDeals campaigns is required 
Integer


"voucher_discount": 12,

index

Order of the interval. Must be unique and incremented (e.g., 1, 2, 3, etc.). The limit is 30.
Optional/Required depending on campaign type.
For MultiDeals campaigns is required
 Integer

"index": 1
"index": 2

Resource
Example
Context
campaign_proposals/save

http method: POST


	•	Smart Deals Badge 
The new /api-3/smart-deals-price-check endpoint helps to retrieve the price required to qualify for the Smart Deals badge.
By providing the productId in the request, the system returns the target price needed for eligibility. 
Resource
Example
Context
smart-deals-price-check

http method: GET


Processing orders
An order consists of customer details, products and discounts from vouchers. It also has information about payment method, shipping tax. Also, each order always has a status attached. The available statuses are:
0 – canceled
1 – new
2 – in progress
3 – prepared
4 – finalized
5 – returned
The resource is order and the available actions are read, save, count and acknowledge.

	•	
	•	
	•	
Order fields
An order has the following properties:
Key – level 1
Key – level 2
Description
Constraints
Example
id

The number that uniquely identifies an order.
Required. Integer value between 1 and 4294967295.
id=939393
status

The order processing status. Possible values:
0 - cancelled
1 - new
2 - in progress
3 – prepared
4 - finalized
5 - returned
Required. Integer value between 0 and 5.
status=1
is_complete

A flag indicating if the order is complete (has all details necessary for processing) or not. Possible values:
0 - incomplete;
1 - complete.
Optional. Integer value.
is_complete=1
type

A flag indicating if the order contains products fulfilled by eMAG or by seller. Possible values: 2 – fulfilled by eMAG
3 – fulfilled by seller

You can edit only orders having type 3. The only action that can be done on orders having type 2 is attachment upload.
Required*. Integer value.

*Starting with August 2025, the type of the order is mandatory.
type=3
payment_mode_id

The order payment method. Possible values:
1 - COD (cash on delivery)
2 - bank transfer
3 - online card payment
Required. Integer.
payment_mode_id=1
detailed_payment_method

The detailed order payment method. 
Optional. String.
detailed_payment_method = “eCREDIT”
delivery_mode

The order delivery method. Possible values:
“courier” – home delivery
“pickup” – locker delivery
Optional. String.
delivery_mode=”courier”
details

Order extra details.
Optional. Array.

details
locker_id
The pickup point id, if the locker delivery option was selected by a customer.
Optional. String.
locker_id=”dce0b7cf-dc38-11e8-a7d8-001a4a160153”

locker_name
The pickup point name, if the locker delivery option was selected by a customer.
Optional. String.
locker_name=”easybox eMAG Showroom”

locker_delivery_eligible
Indicates if the order, regardless of the delivery method selected by the customer, would fit into a locker.
0 – not eligible for locker delivery
1 – eligible for locker delivery
Optional. Integer value. 
locker_delivery_eligible=1

courier_external_office_id
The ID represents the identification of the delivery point chosen by the customer in the courier’s internal system (the courier which makes the last mile in Romania).
Optional. String.

Should be used only by sellers included in the Door2Door China project
courier_external_office_id= "183"
date

The cart submission timestamp.
Optional. Text in YYYY-mm-dd HH:ii:ss format.
date=”1970-01-01 23:59:59”
modified

The timestamp of the last update on the order.
Optional. Text in YYYY-mm-dd HH:ii:ss format.
date=”1970-01-01 23:59:59”
payment_status

The payment status. Possible values:
0 - not paid
1 - paid
Optional. It is highly recommended to also interpret the payment status when reading orders with Card Online payment method. The key is available for both Card Online and Cash on delivery orders. For COD, payment_status will be 0 until the cashed amount is received by eMAG. 
payment_status=0
cashed_co

The cashed amount from Card online payment
Optional. Integer.

cashed_cod

The cashed amount from cash on delivery payment
Optional. Integer.

shipping_tax

The shipment tax value.
Optional. Decimal.
shipping_tax=”19.99”
shipping_tax_voucher_split

A list of arrays describing the voucher discounts distribution on shipping tax level.
List.


voucher_id
The ID of the voucher discount
Optional. Integer value between 1 and 9999999.
voucher_id=123

value
The value of the discount, whitout VAT
Optional. Negative value.
value=-200

vat_value
The value of the VAT
Optional.  Negative value.
Vat_value=-38
customer

A list with the details about the customer, the shipping and the billing addresses.
Optional. List.
The field list is detailed below.
products

A list of arrays describing the products in the order.
List.
The field list is detailed below.
attachments

A list of arrays describing the attachments in the order.
List.
The field list is detailed below (chapter 3.1.3).
vouchers

A list describing the voucher discounts.
List.


voucher_id
The ID of the voucher discount
Optional. Integer value between 1 and 9999999.
voucher_id=123

modified
The modified date of the voucher discount
Optional. Text in YYYY-mm-dd HH:ii:ss format.
modified="2015-04-23 11:30:09"

created
The date of the voucher discount
Optional. Text in YYYY-mm-dd HH:ii:ss format.
created="2015-04-23 11:30:09"

status
The status of the voucher discount
Optional. Integer.
status=1

sale_price_vat
The value of the VAT
Optional.  Negative value.
sale_price_vat=”-1.9355"

sale_price
The value of the discount, without VAT
Optional.  Negative value.
sale_price="-8.0645"

voucher_name
The name of the voucher

PAY ATTENTION! You should check from now on the name of the voucher at voucher split level, since now a voucher may be supported in a mixed way between eMAG/FD and you and can have different names.
Optional.  String.
voucher_name="eMAG giftcard"

vat
The VAT rate
Optional.  Decimal.
vat="0.24"

issue_date
The date when the voucher was issued
Optional. Text in YYYY-mm-dd format.
issue_date="2020-06-09"
is_storno

Mandatory key when products are returned for a finalized order. Further details here.
Optional. Boolean.
True indicates partial storno.
is_storno=true
reason_cancellation

The order cancellation reason. Possible values:

1 - Out of stock
2 - Cancelled by the client
3 - The client can not be contacted
15 - Courier delivery term is too large
16 - Transport tax, is too large
17 - Large delivery term, until the product will arrive in our warehouse
18 - Better offer in another store
19 - Payment order has not been paid
20 - Undelivered order, courier reasons
21 - Others
22 - Order Incomplete - automatic cancellation
23 - The customer changed his mind
24 - By customer request
25 - Failed delivery
26 - Late shipment
27 - Irrelevant Order
28 - Canceled by SuperAdmin on seller request
29 - Blacklisted customer
30 - No VAT invoice
31 - The eMAG Marketplace partner requested the order cancellation
32 - The delivery estimate is too long
33 - The product is no longer available in the stock of the eMAG Marketplace partner
34 - Other reasons
35 - The delivery is too expensive
36 - The customer found a better price elsewhere
37 - The customer registered another eMAG order with a similar product
38 - The customer changed his mind, does not need the product
39 - The customer can purchase the product only by installments
40 -  Other reasons EIS
41 - Out of stock - instalments
42 - The product is no longer available in the stock of the eMAG Marketplace partner - instalments
43 -  The delivery estimate is too long
Optional. Integer value between 1 and 5.
cancellation_reason=1
enforced_vendor_courier_accounts

List of the mandatory courier accounts that must be used in AWB issuing. 

If null, you may use any courier from your available ones, if <> null you must use one of the ones from the array and if it’s an empty array, you won’t be able to issue AWB from MKTP.
Optional. Array.


Product field in order details
Key – level 1
Key – level 2
Key – level 3
Description
Constraints
Example
id


eMAG internal order product line id. Any update on order product lines must use this id.
Required. Integer value between 1 and 9999999. id=243409
id=123
product_id


Seller internal product id. This is the primary key for identifying a product offer.
Optional. Integer.

Important:
You cannot change product_id on api-3/order/save.
product_id=3331
product_voucher_split


A list of arrays describing the voucher discounts distribution on product level.
List.


voucher_id

The ID of the voucher discount
Optional. Integer value between 1 and 9999999.
voucher_id=123

value

The value of the discount, whitout VAT
Optional. Negative value.
value=-200

vat_value

The value of the VAT
Optional.  Negative value.
Vat_value=-38

vat

The value of the VAT rate



offered_by

Who supports the voucher: eMAG or seller



voucher_name

The name of the voucher
Optional.  String.
voucher_name="eMAG giftcard"
status


The status of product of the order. Possible values: 0 - cancelled 1 - active
Required. Integer.
status=1
part_number


Manufacturer unique identifier for the product.

It corresponds to the PNK.
Optional. String between 1 and 25 characters.
Important: 
The following characters will be automatically stripped:  
	•	spaces [ ]
	•	comma [ , ]
	•	semicolon [ ; ]
Example: “part number;” will be saved “partnumber”

You cannot change part_number on api-3/order/save.
part_number='682133frs'
ext_part_number


Your unique identifier for the product.

Coincides with part_number if you are the owner of the product’s documentation.
Optional. String between 1 and 25 characters.
Important: 
The following characters will be automatically stripped:  
	•	spaces [ ]
	•	comma [ , ]
	•	semicolon [ ; ]
Example: “ext part number;” will be saved “extpartnumber”

You cannot change ext_part_number on api-3/order/save.
ext_part_number='682133frs'
created


The date when the order product line was created.
Optional. Text in YYYY-mm-dd HH:ii:ss format.
created='2014-07-24 12:16:50'
modified


The date when the order product line was last modified.
Optional. Text in YYYY-mm-dd HH:ii:ss format.
modified='2014-07-24 12:18:53'
currency


Product price currency.
Optional. String.
currency='RON'
quantity


Product quantity.
Required. Integer. Positive, different than 0.
quantity=2
sale_price


The sale price without VAT.
Required. Integer.
sale_price=12.1234
details


Additional product notes.
Optional. Text.
details=”text”
status


The status of product of the order. Possible values: 0 - cancelled 1 - active
Required. Integer.
status=1
sale_price


The sale price without VAT.
Required. Integer.
sale_price=12.1234
details


Additional product notes.
Optional. Text.
details=”text”
recycle_warranties






quantity

Warranty  quantity.
Optional. Integer.
quantity=6

sale_price

The sale price without VAT.
Optional. Integer.
sale_price=0.5

vat_rate

The rate of the VAT
Optional. Integer.
vat_rate=0

product_name

The name of the recycle warranty: plastic, metal, glass
Optional. String.
product_name=”Taxa SGR metal”

recycle_warranty_voucher_split

A list of arrays describing the voucher discounts distribution on recyle warranty level.
List.



voucher_id
The ID of the voucher discount
Optional. Integer value between 1 and 9999999.
voucher_id=875


value
The value of the discount, whitout VAT
Optional. Negative value.
value=-3


vat_value
The value of the VAT
Optional.  Negative value.
vat_value=0
serial_numbers


It’s the serial number (IMEI) of the product. If there are more pieces of a product with IMEI on your order, you will find here as many codes.
Optional. Text.


IMPORTANT
Please note that multiple vouchers, possibly having different VAT rates, can be applied on a product. You should always read all voucher parameters.

Customer fields in order details
The customer field has the following properties:
Key
Description
Constraints
Example
id
The number that uniquely identifies a customer.
Optional. Integer value between 1 and2147483647.
id=1
name
The customer's name.
Optional. Text.
name=”Surname Name”
email
This is a hash that uniquely identifies the customer’s email.
Optional. Text.
email=”1243536@emag.ro”
company
The name of the company. For physical person it has the same value as name.
Optional. Text.
company=”Company name ltd.”
gender
The customer gender. Possible values:
M - male
F – female
Optional. Text.
gender=”M”
code
The company registration code.
Optional. Text.
code=”14399840”
registration_number
The company registration number.
Optional. Text
registration_number=” 40/372/2002”
bank
The bank name.
Optional. Text.
bank=”Bank name”
iban
The bank account.
Optional. Text.
iban=” RO24BACX0000000031430310”
fax
The customer's fax number.
Optional. Text.
fax=”4021123123” 
legal_entity
A flag indicating if the customer is physical or juridical entity. Possible values:
0 - private entity;
1 - legal entity.
Optional. Integer value.
legal_entity=1
is_vat_payer
A flag indicating it the customer is vat payer. Possible values:
0 - the customer is not vat payer;
1 - the customer is vat payer.
Optional. Integer value.
is_vat_payer=0
phone_1
The customer's first phone number.
Optional. Text.
phone_1=”4021123123”
phone_2
The customer's second phone number.
Optional. Text.

phone_3
The customer's third phone number.
Optional. Text.

billing_name
The customer's invoice name.
Optional. Text.
billing_name=”Surname Name”
billing_phone
The customer's invoice phone.
Optional. Text.
billing_phone=”4021123123”
billing_country
The customer's invoice country.
Optional. Text.
billing_country=”Romania”
billing_suburb
The customer's invoice county.
Optional. Text.
billing_suburb=”Suburb”
billing_city
The customer's invoice city.
Optional. Text.
billing_city=”City”
billing_locality_id
The customer's invoice locality id.
Optional. Text.
billing_locality_id=”7”
billing_street
The customer's invoice address.
Optional. Text.
billing_street=”Street Name”
billing_postal_code
The customer's invoice postal code.
Optional. Text.
billing_postal_code=”23125”
shipping_locality_id
The shipping locality id.
Optional. Text.
shipping_locality_id=”7”
shipping_contact
The name of the contact person that will pick up the parcel. Should be printed on the AWB.
Optional. Text.
shipping_contact=”Name Surname”
shipping_phone
The phone used by the courrier to contact the shipping person. Should be printed on the AWB.
Optional. Text.
shipping_phone=”23125”

Order invoices and warranties
When pushing orders into finalized status, you should also send the invoice PDF file location for the specific order. 
The resource is order/attachments and the available action is save.
The following keys should be sent in attachments array in order to display an invoice in the customer’s order details: name, url, type.
If your order contains product(s) that have a warranty, you can upload it as well, so that the customer can have access to it in his account. All you have to do on the request is to use type = 3 + order_product_id (the value from api-3/order/read -> products -> id), in order to indicate the exact product for that warranty.
An attachment has the following properties:
Key
Description
Constraints
Example
order_id
The number that uniquely identifies an order.
Required for invoices. Integer value between 1 and 4294967295.
id=939393
order_type
Indicates the type of the order. Possible values: 2 – fulfilled by eMAG
3 – fulfilled by seller

You can attach files on both order types, so you must provide the order type to attach the file correctly.
Integer. Required.
type=3
order_product_id
The number that uniquely identifies a product. You can attach only one warranty per product.
Required for warranties. Integer value between 1 and 4294967295.

Same value as products.id from api-3/order/read.
id= 171958974
name
The name of the attachment displayed to the customer (in order history or in email)
Optional. String between 1 and 60 characters
name='Invoice title'
url
Attachment URL.
Required. String between 1 and 1024 characters. Valid URL to document.
url=”http://valid-url/invoice.pdf”
type
   The type of document attached to the order. Possible values are:
	•	1 - invoice
	•	3 - warranty
	•	4 - user manual
	•	8 - user guide
	•	10 - AWB
	•	11 - proforma
Integer. Optional. Default 1=”Invoice”. Only .pdf files are accepted

type=1
force_download
Flag used in order to force attachment download restrictions. If value is 0 and the attachment URL has not changed, the attachment will not be downloaded again.
Integer. Optional. Default value 0. Possible values: 0,1.
force_download=0

Order notification, acknowledgment and order filters
When a new order is placed in eMAG Marketplace for the first time, it’s status is 1 (new) and a GET request with the order id is automatically made to an URL you provide (call-back URL). Ex: http://valid_url/path?order_id=123 
In the next step, you should read the order passing the id previously mentioned and after successfully saving the order in your database you should notify us by calling back the API using the route MARKETPLACE _URL/api-3/order/acknowledge/[orderId]. This stops the order notification system for the mentioned order. 
IMPORTANT: 
	•	Order acknowledge is the only method of marking the order status as “in progress”. It is available only for 3P orders.
	•	Clients may ask for an order to be canceled, this will be done by eMAG only if the order was not acknowledged by the seller, thus some of the orders may be read directly with status 0 (canceled).

Order status matrix
The following matrix defines the order flow in eMAG Marketplace:
 
New status
Actual status
1 - New
2 - In progress
3 – Prepared
4 - Finalized
0 - Canceled
5 - Returned
1 - New
No
Yes by ACK only
No
No
No
No
2 - In progress
No
Yes
Yes
Yes
Yes
No
3 - Prepared
No
No
Yes
Yes
Yes
No
4 - Finalized
No
No
Yes in 48h max
Yes
Yes in 48h max
Yes in RT* + 5 days max
0 - Canceled
No
Yes in 48h max
Yes in 48h max
Yes in 48h max
Yes
No
5 - Returned
No
No
No
No
No
No
   *RT = return time allowed to customers

IMPORTANT: 
	•	We recommend setting up a periodical /order/read (cron, agent) that should identify orders that were not acknowledged. By default on /order/read we expose the last 100 orders, but you can request up to 1000 or use pagination. Do not forget to test the order status matrix against your internal order workflow. As a best practice you should either acknowledge the order prior the read or re-read the order after acknowledging it; an order can be modified by eMAG employees upon the client’s request as long as it is not acknowledged;
	•	You can only edit the order (add/remove products modify quantity or price) when in status 2 (in progress) or 3 (prepared);
	•	Once an order is finalized, you can change its status back to status 3 (prepared) or 0 (canceled) only in the first 48 hours since finalization;
	•	Order status “finalized” will be set automatically when issuing the first AWB for that order. See chapter Saving AWBs;
	•	The order status “returned” is set automatically when all the products from the initial invoice are marked as returned. The change is permitted only within the maximum return timeframe allowed to the customer.

Order filters
You can read all your orders though the API, using filters. The following are available when counting orders:

Key
Description
Constraints
id
Only the order with this value.
Optional. Integer value between 1 and4294967295.
createdBefore
Only the orders created before the specified date. Can only be set if “createdAfter” is present. Maximum 1 month difference.
Optional. Text in YYYY-mm-dd HH:ii:ss format.
createdAfter 
Only the orders created after the specified date. Can only be set if “createdBefore” is present. Maximum 1 month difference.
Optional. Text in YYYY-mm-dd HH:ii:ss format.
modifiedBefore
Only the orders modified before the specified date. Can only be set if “modifiedAfter” is present. Maximum 1 month difference.
Optional. Text in YYYY-mm-dd HH:ii:ss format.
modifiedAfter
Only the orders after before the specified date. Can only be set if “modifiedBefore” is present. Maximum 1 month difference.
Optional. Text in YYYY-mm-dd HH:ii:ss format.
status
Only the orders with the specified status. It is a single value or a list of values.
Optional. Integer or list.
payment_mode_ id
Only the orders with the specified payment method id. It is a single value or a list of values.
Optional. Integer or list.
is_complete
Only the orders with the specified completion status.
Optional. Order completion status. 1 – complete orders
0 – incomplete orders
type
Only the orders with the specified type
Optional. 
2 – fulfilled by eMAG
3 – fulfilled by seller

The following filters are available when reading orders:
Key
Description
Constraints
itemsPerPage
The maximum number of orders to return.
Optional. Integer value between 1 and 100.
currentPage
The page offset.
Optional. Integer value between 1 and 65535.
id
Only the order with this value.
Optional. Integer value between 1 and4294967295.
createdBefore
Only the orders created before the specified date. Can only be set if “createdAfter” is present. Maximum 1 month difference.
Optional. Text in YYYY-mm-dd HH:ii:ss format.
createdAfter 
Only the orders created after the specified date.
Optional. Text in YYYY-mm-dd HH:ii:ss format.
modifiedBefore
Only the orders modified before the specified date. Can only be set if “modifiedAfter” is present. Maximum 1 month difference.
Optional. Text in YYYY-mm-dd HH:ii:ss format.
modifiedAfter
Only the orders after the specified date.
Optional. Text in YYYY-mm-dd HH:ii:ss format.
status
Only the orders with the specified status. It is a single value or a list of values.
Optional. Integer or list.
payment_mode_id
Only the orders with the specified payment method id. It is a single value or a list of values.
Optional. Integer or list.
is_complete
Only the orders with the specified completion status.
Optional. Order completion status. 1 – complete orders
0 – incomplete orders
type
Only the orders with the specified type
Optional. Default value = 3.
2 – fulfilled by eMAG
3 – fulfilled by seller
Updating orders
You cannot create new orders through the API, you can only read and update them. When updating an order, the seller should send ALL the fields initially read.
IMPORTANT: 
Updating products by reducing their quantities for orders with Online Card payment method is no longer possible.
Updating product prices is no longer available
A canceled order can no longer be reactivated if more than 48 hours have passed since cancelation
Resource
Example
Context
order/save

http method: POST


Removing products from an order
To remove a product from the order send the status=0 for the product or do not send it at all. Products can be removed from an order only while in status 2 or 3 (in progress or prepared) for orders with payment methods different than Online card. For returned products (the order is in status 4, finalized), please use the storno route.
IMPORTANT: Removing products for orders with Online Card payment method is no longer possible.

Adding products to an existng order
To add a new product to an existing order, add it to the order by sending the product id (mandatory), name, status and sale price.
IMPORTANT: virtual products such as internal discounts can be inserted in an order, even if they were not previously sent to eMAG. Adding these products to an order will not make them available for purchase in the eMAG Marketplace platform.

Returned products and storno route
	•	A finalized order cannot be modified, it can be fully reversed by changing the order status from finalized (4) to returned (5) or have only some of the products reversed using a call with is_storno key true. 
	•	The following conditions must be met in order for a partial storno to occur:
	•	Order must be in status 4
	•	At least one product quantity was reduced 
The following scenarios can be used as a guideline for returning products (partial storno) from a finalized order:
Current order status
Request
isError
Order read
status' => 4,
'products' => 
      array (
        0 => 
        array (
          'id' => 1,
          'product_id' => '1',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
        1 => 
        array (
          'id' => 2,
          'product_id' => '2',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
      ),
status' => 4,
'products' => 
      array (
        0 => 
        array (
          'id' => 1,
          'product_id' => '1',
          'quantity' => 1,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
        1 => 
        array (
          'id' => 2,
          'product_id' => '2',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
      ),
'is_storno'=true
FALSE
status' => 4,
'products' => 
      array (
        0 => 
        array (
          'id' => 1,
          'product_id' => '1',
          'quantity' => 1,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
        1 => 
        array (
          'id' => 2,
          'product_id' => '2',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
      ),
status' => 4,
'products' => 
      array (
        0 => 
        array (
          'id' => 1,
          'product_id' => '1',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
        1 => 
        array (
          'id' => 2,
          'product_id' => '2',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
      ),
status' => 4,
'products' => 
      array (
        0 => 
        array (
          'id' => 1,
          'product_id' => '1',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
        1 => 
        array (
          'id' => 2,
          'product_id' => '2',
          'quantity' => 0,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
      ),
'is_storno'=true
FALSE
status' => 4,
'products' => 
      array (
        0 => 
        array (
          'id' => 1,
          'product_id' => '1',
          'quantity' => 0,
          'sale_price' => '123.4567',
          'status' => 1,
        ),	
      ),
status' => 4,
'products' => 
      array (
        0 => 
        array (
          'id' => 1,
          'product_id' => '1',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
        1 => 
        array (
          'id' => 2,
          'product_id' => '2',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
      ),
status' => 4,
'products' => 
      array (
        0 => 
        array (
          'id' => 1,
          'product_id' => '1',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
        1 => 
        array (
          'id' => 2,
          'product_id' => '2',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 0,
        ),
      ),
'is_storno'=true
FALSE
status' => 4,
'products' => 
      array (
        0 => 
        array (
          'id' => 1,
          'product_id' => '1',
          'quantity' => 0,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
      ),
status' => 4,
'products' => 
      array (
        0 => 
        array (
          'id' => 1,
          'product_id' => '1',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
        1 => 
        array (
          'id' => 2,
          'product_id' => '2',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
      ),
status' => 4,
'products' => 
      array (
        0 => 
        array (
          'id' => 1,
          'product_id' => '1',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
        1 => 
        array (
          'id' => 2,
          'product_id' => '2',
          'quantity' => 1,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
      ),
TRUE
The request will be discarded, as you are trying to modify a finalized order without is_storno key.
status' => 4,
'products' => 
      array (
        0 => 
        array (
          'id' => 1,
          'product_id' => '1',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
        1 => 
        array (
          'id' => 2,
          'product_id' => '2',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
      ),
status' => 4,
'products' => 
      array (
        0 => 
        array (
          'id' => 1,
          'product_id' => '1',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
        1 => 
        array (
          'id' => 2,
          'product_id' => '2',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
      ),
'is_storno'=true
TRUE
The request will be discarded, as you are sending is_storno key without any change to an order line
status' => 3,
'products' => 
      array (
        0 => 
        array (
          'id' => 1,
          'product_id' => '1',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
        1 => 
        array (
          'id' => 2,
          'product_id' => '2',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
      ),
status' => 3,
'products' => 
      array (
        0 => 
        array (
          'id' => 1,
          'product_id' => '1',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
        1 => 
        array (
          'id' => 2,
          'product_id' => '2',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
      ),
'is_storno'=true
TRUE
The request will be discarded, as you are sending is_storno key for an order with a status different than 4
status' => 4,
'products' => 
      array (
        0 => 
        array (
          'id' => 1,
          'product_id' => '1',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
        1 => 
        array (
          'id' => 2,
          'product_id' => '2',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
      ),
status' => 4,
'products' => 
      array (
        0 => 
        array (
          'id' => 1,
          'product_id' => '1',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
        1 => 
        array (
          'id' => 2,
          'product_id' => '2',
          'quantity' => 2,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
        2 => 
        array (
          'id' => 2,
          'product_id' => '2',
          'quantity' => -1,
          'sale_price' => '123.4567',
          'status' => 1,
        ),
      ),
'is_storno'=true
TRUE
The request will be discarded, as you are trying to send a negative quantity for a product

Shipping orders
For electronic deliveries and downloadable goods, please skip this section. Shipping an eMAG Marketplace order requires the seller to issue an AWB using eMAG Marketplace API.
The resource is AWB and the available actions are read and save.

	•	
Saving AWB
To save an AWB just call the API with the following parameters:
Key
Description
Constraints
order_id
Identifies the order
Required. Integer value between 1 and 4294967295.
Must be a valid order in the eMAG database, and must be owned by the seller.
rma_id
Identifies the return request
Optional. Integer value between 1 and 4294967295.
Must be a valid return request in the eMAG database, and must be owned by the seller.
sender
*Array explained below
 
receiver
*Array explained below
 
locker_id
The pickup point id. Should be filled in with the pickup point id received on the order. If filled in, the courier will deliver the parcel in the designated locker.
Optional. String value between 3 and 255 characters
is_oversize
If set to 1, marks the delivery as containing oversized products
Required. Value can only be 0 or 1.
insured_value
The insured value
Optional. Double value between 0 and 999999999
weight
The weight of delivery
Optional. Double value between 0 and 99999
envelope_number
Number of envelopes to be delivered
Required. Integer value between 0 and 9999. If parcel_number is 0, this parameter cannot be 0
parcel_number
Number of parcels to be delivered
Required. Integer value between 0 and 999. If envelope_number is 0, this parameter cannot be 0
observation
Observation text
Optional. String value between 0 and 255
cod
Cash on delivery
Required. Double value between 0 and 999999999
courier_account_id
Unique identifier for seller’s courier account. If not provided, a default account will be used.
Optional. Integer.
pickup_and_return
If set to 1, sender expects something in return to this expedition (documents, buy-back products, etc).  For an AWB belonging to a return must be 0 or not sent.
Optional. Value can only be 0 or 1.
saturday_delivery
If set to 1, sender requests the package to be delivered on Saturday.
Optional. Value can only be 0 or 1.
sameday_delivery
If set to 1, sender requests the package to be delivered the same day. 
Optional. Value can only be 0 or 1.
dropoff_locker
If set to 1, you will issue the AWB without a request sent to courier to pickup your order. If set to 0 or not provided, the courier will pickup up the order from your warehouse.
Optional. Value can only be 0 or 1. Used only for orders.
unboxing
If set to 1, you will issue the AWB with the “Open on delivery” option for the customer. If set to 0 or not provided, the AWB will be issued without the “Open on delivery” option for the customer.
Optional. Value can only be 0 or 1. It will be taken into consideration only for sellers which have control on this field. In order to be allowed to control this field, you need to contact Marketplace team.
date

Required for AWBs belonging to returns. Must be at least the next day of the AWB issuing.
An AWB S/R (sender/receiver) has the following properties:
Key
Description
Constraints
name
S/R's name
Required. String value between 3 and 255
contact
Receiver's contact person name
Required. String value between 1 and 255
phone1
S/R first phone number
Required. String value between 8 and 11 digits (only '+' character is allowed at the beginning of the string)
phone2
S/R second phone number
Optional. String value between 8 and 11 digits (only '+' character is allowed at the beginning of the string)
legal_entity
If Receiver is legal entity (applicable only to receiver)
LEGAL_ENTITY_NO = 0 LEGAL_ENTITY_YES = 1
address_id
The id of your address (seller address).
Optional.  String value between 0 and 21 
If sent on S (for orders) or R (for returns), we will use the address saved in your account, regardless of the other address fields sent in the request.
locality_id
S/R's locality_id
Required. Integer value between 1 and 4294967295.
Must be a valid locality in the eMAG database.
street
S/R's street
Required. String value between 3 and 255
zipcode
S/R's zipcode
Optional. String value between 1 and 255

Examples of requests 
Resource
Example
Context
awb/save
s
http method: POST
Seller wants to issue AWB for orders
awb/save

http method: POST
Seller wants to issue AWB for returns

IMPORTANT:
For orders with “pickup” as a delivery method if you do not change the locker id that is already included in the “shipping_street” field the AWB will be issued as a locker delivery using the proper courier account regardless of the actual courier account you specified when issuing the AWB.

Reading AWB
The following filters are available when reading AWBs:
Key
Description
Constraints
emag_id
The eMAG internal barcode id
Integer value between 1 and 4294967295.
Must be a valid AWB in eMAG database.
reservation_id
The eMAG internal AWB reservation id
Integer value between 1 and 4294967295.
Must be a valid AWB in eMAG database.
An AWB has the following properties:
AWB – read
Key – level 1
Key – level 2
Description
Constraints
Example
emag_id
 
The eMAG internal AWB id
Integer.
emag_id=243409
order_id
 
The id of the order on which the AWB was issued
Integer.
order_id=243409
rma_id
 
The id of the return request on which the AWB was issued
Integer.
rma_id=243409
type

The type of the order/return request.
2 – fulfilled by eMAG
3 – fulfilled by seller
Integer.
type=3
weight
 
The weight of delivery
Integer.
weight=1
awb_type

The type of delivery. Possible values: 
1 – delivery to customer 
2 – pickup from customer

The key is returned only for AWBs belonging to return requests.
Integer. 
awb_type=1
awb

The AWB
List of arrays.


emag_id
 The eMAG internal AWB barcode id
Integer
emag_id=243409

awb_number
The AWB number
String
awb_number = “2EMG00011012”

awb_barcode
The AWB barcode
String
awb_barcode = “2EMG00011012001”
status
 
The status of the delivery
List of arrays.
 

code
The code status of the delivery
String.
code=”DLV”

name
The name of the status of the delivery
String.
name=”Delivered”

description
The description of the status of the delivery
String.
description=”AWB delivered”
 courier
 
The courier used for issuing the AWB
List of arrays.
 

courier_account_id
The eMAG internal courier account id used for issuing the AWB
Integer.
courier_account_id=5186

courier_name
The eMAG internal courier name used for issuing the AWB
String.
courier_name="SAMEDAY"

Reading AWB PDF files
To download an AWB PDF file call the MARKETPLACE_API_URL/awb URL as in the example below
<html>
Running...<br>
<?	
$username = 'user';
$password = 'pass';
$hash = base64_encode($username . ':' . $password);
$headers = array(
'Authorization: Basic ' . $hash
);
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL,'https://marketplace-api.emag.ro/awb/read_pdf?emag_id=9755945&awb_format=A4';
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
curl_setopt($ch, CURLOPT_HEADER, 0);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
$result = curl_exec($ch);
echo $result . "\n";
?>
</html>

Optional: You can set the paper format on PDF download link by using the parameter "awb_format=A4" in the link. The possible values are A4, A5, A6.
To download an AWB just call the API with the following parameters:
Key
Description
Constraints
emag_id
The AWB's eMAG id.
Integer value between 1 and 4294967295.
Must be a valid AWB in eMAG database.
awb_format
The paper format on PDF download
 The possible values are A4, A5, A6 and ZPL
You can read only AWBs issued via API, only for them you receive the “emag_id” key, which is mandatory.

Reading AWB ZPL type
To read an AWB in ZPL type call the MARKETPLACE_API_URL/awb URL as in the example below
<html>
Running...<br>
<?	
$username = 'user';
$password = 'pass';
$hash = base64_encode($username . ':' . $password);
$headers = array(
'Authorization: Basic ' . $hash
);
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL,'https://marketplace-api.emag.ro/awb/read_zpl?emag_id=9755945';
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
curl_setopt($ch, CURLOPT_HEADER, 0);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
$result = curl_exec($ch);
echo $result . "\n";
?>
</html>

Using this request will return a base64 encoded content of the ZPL format as in the example below
Resource
Example
Context
awb/read_zpl

http method: POST

Counting Localities
In order to issue an AWB you need to submit the correct locality id. You can also use the id from the order.
The resource is locality and the available actions are read and count.
The following filters are available when counting localities:
Key
Description
Constraints
emag_id
The locality with this id
Integer	
name
All localities with this name
String of length between 0 and 60
modified
All localities modified after this date
Date with the 'Y-m-d H:i:s' format

Reading Localities
The following filters are available when reading localities:
Key
Description
Constraints
emag_id
The locality with this id
Integer
name
All localities with this name
String of length between 0 and 60
region2
The name of the county for which you want localities
String of length between 0 and 60
country_code
Country Alpha-2 code. Available values: 
RO – Romania
BG – Bulgaria
HU – Hungary
PL – Poland
EL – Greece
DE – Deutchland
String of length 0 and 60
modified
All localities modified after this date
Date with the 'Y-m-d H:i:s' format
itemsPerPage
The maximum number of localities to return.
Optional. Integer value between 1 and 100.
currentPage
The page offset.
Optional. Integer value between 1 and 65535.

When not using the country filter the API will respond only with localities from the platform country.

A locality has the following properties:
Key
Description
Constraints
emag_id
The id of the locality
Integer
name
The name of the locality
String of length between 0 and 60
name_latin
The latin name of the locality
String of length between 0 and 60
region([1-4]+)
Region name
String of length between 0 and 60
region([1-4]+)_latin
Region name latin version
String of length between 0 and 60
geoid
Geographic id of the location
Integer
modified
Last modification date
Date with the 'Y-m-d H:i:s' format
zipcode
The zipcode of the locality
String of length between 0 and 10
country_code
Country Alpha-2 code
String of length between 0 and 60
iso2
Combination between country’s code and county’s code
String of length between 0 and 60

Reading courier accounts
In order to issue an AWB you need to submit the correct courier account id.
Key
Description
Constraints
account_id
The id of the account
Integer
account_display_name
The name of the account
String of length between 0 and 60
courier_account_type
The type of the account
Integer. Possible values: 1 - RMA; 2 - Order; 3 - RMA & Order; 4 - Non Marketplace
courier_name
The name of the courier
String of length between 0 and 60
courier_account_properties
The courier account properties
Array.  Possible values: 
0 – Regular (HD)
2 – Lockers
6 – Offices 
8 – Crossborder
9 – BPO
created
The account creation date
Date with the 'Y-m-d H:i:s' format
status
Account status
Integer. Possible values: 1 - Active; 0 - Inactive
pickup_country_code
Country Alpha-2 code.
The country from where the courier picks up the orders
String of length between 0 and 60

Reading addresses
In order to issue an AWB you need to provide the pickup/return address. Your addresses are defined by the following fields:
Key
Description
Constraints
address_id
The id of the address
String of length between 0 and 21
country_id
The id of the country
Integer
country_code
Country Alpha-2 code 
String of length between 0 and 45
address_type_id
The type of the address. Possible values are:
	•	1 - return 
	•	2 - pickup 
	•	3 - invoice (head quarter) 
	•	4 - delivery estimates
Integer
locality_id
The id of the locality
Integer
suburb
The county of the address
String of length between 0 and 200
city
The city of the address
String of length between 0 and 300
address
The address: containing street, street number, etc.
String  of length between 0 and 65535
zipcode
The postal code of the address
String of length between 0 and 100
quarter
The quarter of the address
String of length between 0 and 200
floor
The quarter of the address
String of length between 0 and 100
is_default
Indicates if the address is set as default for pickup/return.  Possible values are:
	•	false - is not default 
	•	true - is default 
Boolean


Processing return requests
A return request consists of customer details, products and reason for returning products. Each return request always has a status attached. The available statuses are:
1 - incomplete
2 - new
3 - acknowledged
4 - refused
5 - canceled
6 - received
7 - finalized
The resource is RMA and the available actions are read, save.

Return requests fields
The message structure for both read and save actions is detailed below:
 
RMA – read and save/update
Key – level 1
Key – level 2
Description
Constraints
Example
emag_id
 
Return request eMAG system ID
Required.
Type: bigint
 
 id
 
Seller internal return request ID
Type: bigint
 
 order_id
 
The id of the order in which the product to be returned was included
Required.
Type: bigint
 
type

A flag indicating if the return request contains products fulfilled by eMAG or by seller. Possible values: 2 – fulfilled by eMAG
3 – fulfilled by seller
Required.
Type: Integer.
type=3
 invoice_number
 
Invoice of the order in which the product to be returned was included
Optional.
Type: varchar
Default value: NULL
 
 customer_name
 
Customer name
Required.
Type: varchar
 
 customer_company
 
Customer company info
Optional.
Type: varchar
Default value NULL
 
 customer_phone
 
Customer phone no.
Required.
Type: varchar
 
 products
 
Product to be returned info
 Array
 

id
eMAG internal return product line id. Any update on return product lines must use this id.
Required. Integer value between 1 and 9999999.
id=123
 
 product_emag_id
Product to be returned eMAG ID
 
 
 
 product_id
Product to be returned seller internal ID
Required.
Type: int
 

 quantity
Product quantity
Required
Type: int

 
 product_name
Product name
Required.
Type: varchar
 
 
 return_reason
It holds the return reason selected by the customer. In the attached files you will find the possible IDs for the return reasons and their hierarchy.



Note: If you opt for a return reason that has other higher level reason(s), you will only need to fill in the last level ID from the hierarchy.

Required
Type: int
 

observations
Free text notes field.
 
Note: According to the attached files above, the observations key could be optional (value 0 or value 1) or mandatory (value 2).
Optional/ Required
Type: text
Default value: NULL

 
 diagnostic
Diagnostic after product analysis
Optional.
Type: int
Default value NULL
 
 
 reject_reason
Reason of return rejection
Optional.
Type: int
Default value NULL
 
 
 refund_value
Refund value
Optional.
Type: varchar
 
awbs

Issued AWBs
List of arrays.


reservation_id
eMAG internal AWB reservation id. Use this id to read an AWB
Optional.
Type: int
reservation_id= 4528511
 pickup_country
 
 
Required.
Type: Varchar

 pickup_suburb
 
 
Required.
Type: Varchar
 
 pickup_city
 
 
Required.
Type: Varchar
 
 pickup_address
 
 
Required.
Type: Varchar
 
 pickup_address_id
 
Id of address already saved on the customers' account
Optional.
Type: Int
Default value: NULL 
 
 pickup_zipcode
 
 
Optional.
Type: Varchar
Default value: NULL
 
 pickup_date
 
Returned product pickup date (in case of vendor pickup from customer)
Optional.
Type: datetime
Default value NULL
 
pickup_locality_id
 
The internal eMAG ID of the pickup address city/locality
Required.
Type: int
 
pickup_method
 
The product pickup method selected by the customer when inserting the return request. Possible values:
	•	1 - eMAG courier
	•	2 - Seller’s own courier
	•	3 - Sent by client
Required.
Type: int
 
 return_reason
 
It holds the return reason selected by the customer. In the attached files you will find the possible IDs for the return reasons and their hierarchy.



Note: If you opt for a return reason that has other higher level reason(s), you will only need to fill in the last level ID from the hierarchy.
Required
Type: int
 
observations
 
Free text notes field. 

Note: According to the attached files above, the observations key could be optional (value 0 or value 1) or mandatory (value 2).
Optional/ Required
Type: text
Default value: NULL

 return_type
 
It holds the return type selected by the customer. Possible values:
1 - Replacement with same product
2 - Replacement with a different product
3 - Refund
4 - Cancel payment contract for this product
5 - Voucher
Required.
Type: Int
 
return_address_id
 
It will hold the id of the return address selected by the vendor in RMA UI
Optional.
Type: Int
Default value: id of the address set as default in vendor profile address page.
 
return_tax_value
 
Shipping tax for refused returned products (VAT included)
The currency used will be the platforms' default
Optional.  Type: Float Default value: NULL
 
customer_account_iban
 
 
Type: Varchar
Default value: NULL
 
customer_account_bank
 
 
Type: Varchar
Default value: NULL
 
customer_account_beneficiary
 
 
Type: Varchar
Default value: NULL
 
replacement_product_emag_id
 
The eMAG ID of the replacement product
Type: Int
Default value: NULL
 
replacement_product_id
 
The seller internal ID of the replacement product
Type: Int
Default value: NULL
 
replacement_product_name
 
 
Type: Varchar
Default value: NULL
 
replacement_product_quantity
 
 
Type: Int
Default value: NULL
 
 date
 
RMA request insertion date
Required.
Type: datetime
 
request_status
 
RMA request status. Possible values:
1 - Incomplete
2 - New
3 - Approved
4 - Refused
5 - Canceled
6 - Received
7 - Finalized
Optional.
Type: Int
 
 
	•	

Return requests filters
When reading return requests the following filters are available:

Key
Description
Constraints
id
Seller internal return request ID
 
emag_id
eMAG return request ID
 
order_id
Order on which the product to be returned was included
 
product_id
Seller internal returned product ID
 
product_emag_id
eMAG returned product ID
 
request_status
Return request status ID
 
date_start
Only the returns placed starting with the mentioned date
Text in YYYY-mm-dd HH:ii:ss format.
date_end
Only the returns placed before the mentioned date
Text in YYYY-mm-dd HH:ii:ss format.
type
The type of the order/return request.
2 – fulfilled by eMAG
3 – fulfilled by seller
Integer

Status change permissions
The following matrix defines the return request processing flow in eMAG Marketplace:


 
New status
Actual status
2 - New
3 - Acknowledged
4 - Rejected
5 - Canceled
6 - Received
7 - Finalized
2 - New
Yes
Yes
No
Yes
No
No
3 - Acknowledged
No
Yes
No
Yes
Yes
No
4 - Rejected
No
No
Yes
No
No
No
5 - Canceled
No
No
No
Yes
No
No
6 - Received
No
No
Yes
No
Yes
Yes
7 - Finalized
No
No
No
No
No
Yes
      *Some of the statuses were left out by design; these should not be used in any seller implementation

Return request deliveries
There are two types of possible deliveries for the return requests:
pick-up requests - courier picks up the returned product(s) from the customer and delivers them to the seller
regular deliveries - courier delivers the returned/replaced product back to the customer
 The delivery requests will be generated using the AWB save resource.

Examples requests and responses
Resource
Example
Context
RMA/read

http method: POST
Seller has return requests
RMA/read

http method: POST
Seller does not have return requests
RMA/save

http method: POST


Invoice API

The following documentation covers the available APIs used to:
	•	Read invoice categories
	•	Read invoice data
	•	Read customer invoice data
	•	Reading invoice categories
Every MKTP invoice is included in a category. In order to read all invoice data of a specific MKTP invoice type, first call the following API without any parameter api-3/invoice/categories. 

Resource
Example
Context
invoice/categories

http method: POST


As a result, we will return a collection of categories and the invoice name as follows:

Key – level 1
Key – level 2
Key – level 3
Description
Constraints
Example
category


Invoice type
Type: string
category='FC'
name

 
Invoice type name
Type: string
 name='Commission'

Resource
Example
Context
invoice/categories

http method: POST


	•	Reading invoice data 
URL: api-3/invoice/read

The resource is invoice and for the moment the only available action is read.
Reading invoice data without parameters, will generate a response containing the last 100 invoices.

You can read the invoice details using the following available filters:

Key
Description
Constraints
category
The invoice category from the results displayed when calling the api-3/invoice/categories API.
Optional
category='FC'
number
The invoice series+number.
Optional 
number='C-MKTP-100001'
date_start
Only invoices created after date_start.
Optional
Text in YYYY-mm-dd format
date_end
Only invoices created before date_end.
Optional
Text in YYYY-mm-dd format
itemsPerPage 
The maximum number of invoice data to return.
Optional. Integer value between 1 and 1000. Default value=100.
currentPage
The page offset.
Default value=1.


Reponse:
Key – level 1
Key – level 2
Key – level 3
Description
Constraints
Example
total_results


Number of invoices identified
Type:interger
total_results=1
invoices
category
 
Invoice type
Type: string
 category='FC'

name

Invoice name
Type: string
name=’Commision’

number
 
Invoice series+number
Type: string
number='C-MKTP-100001'

date

The date when the invoice was created.
Text in YYYY-mm-dd 
date= '2020-07-24'

is_storno

The invoice represents a reversal of another invoice.
Type: integer
is_storno=1/is_storno=0

supplier
name
Supplier name (legal name)
Type: string between 1 and 100 characters.
name='Dante International SA'


register_number
Registration number
Type: string between 1 and 50 characters.
register_number='J40/372/2002'


cif
Unique Identification Code
Type: string between 1 and 50 characters.
cif='14399840'


tax_code
VAT Number
Type: string between 1 and 50 characters.
tax_code='RO14399840'


social_capital
Subscribed and paid capital
Type: string between 1 and 50 characters.
social_capital='1.210.822 RON'


iban
Bank account
Type: string between 1 and 100 characters.
iban='RO73INGB0001008199078940'


bank
Bank name
Type: string between 1 and 100 characters.
bank='ING BANK'


address
Headquarters
Type: string between 1 and 255 characters.
address=' 148 Virtutii, E47, 060787, Sector 6,
Bucuresti'


phone_number
Phone number
Type: string between 1 and 50 characters.
phone=number='40212005200'

customer
name
Buyer name (legal name)
Type: string between 1 and 100 characters.
name='Test SRL'


register_number
Registration number
Type: string between 1 and 50 characters.
register_number=' JXX/XXX/2002''


cif
Unique Identification Code
Type: string between 1 and 50 characters.
cif='123456'


tax_code
VAT Number
Type: string between 1 and 50 characters.
tax_code='RO123456'


iban
Bank account 
Type: string between 1 and 100 characters.
iban=' RO00INGB0000000000070000'


bank
Bank name
Type: string between 1 and 100 characters.
bank='ING'


country
Country
Type: string between 1 and 100 characters.
country='Romania'


address
Headquarters
Type: string between 1 and 255 characters.
address='Strada ABC, Bucuresti'

lines
product_name
Products/Services Description
Type: text
product_name='Comision aferent desfasurator _dc_082015_1443024267_v1, conform contract'


unit_of_measure
Unit of measure
Type: string between 1 and 20 characters
unit_of_measure='Buc'


quantity
Quantity
Type: double
quatity=1


unit_price
Unit value
Type: double
unit_price=100


vat_rate
VAT Rate
Type: smallint
vat_rate=19


value
Product value (without VAT)
Type: integer
value=119


vat_value
VAT value
Type: integer
vat_value=19

payment_term

Invoice due date
Type: integer
payment_term=0

total_without_vat

Total invoice without VAT
Type: integer
total_without_vat=100

total_vat_value

Total invoice VAT value
Type: integer
total_vat_value=19

total_with_vat

Total invoice with VAT
Type: integer
total_with_vat=119

currency

Invoice currency
Type: string
currency='RON'

	•	Reading customer invoice data 
URL: api-3/customer-invoice/read

The resource is customer-invoice and for the moment the only available action is read.
Reading customer invoice data without parameters, will generate a response containing the last 100 invoices.
You can read the customer invoice details using the following available filters:

Key
Description
Constraints
category
The invoice category: normal or storno invoice.
Optional
category='normal' / category='storno'
order_id
The order which was invoiced.
Optional
order_id='148717039'

number
The invoice series+number.
Optional 
number='PRAF100010'
date_start
Only invoices created after date_start.
Optional
Text in YYYY-mm-dd format
date_end
Only invoices created before date_end.
Optional
Text in YYYY-mm-dd format
itemsPerPage 
The maximum number of invoice data to return.
Optional. Integer value between 1 and 1000. Default value=100.
currentPage
The page offset.
Default value=1.


Response:
Key – level 1
Key – level 2
Key – level 3
Description
Constraints
Example
total_results


Number of invoices identified
Type:interger
total_results=1
invoices
category
 
Invoice type
Type: string
 category='storno'

order_id
 
The order which was invoiced. 
Type: integer
 order_id='148717039'

number
 
Invoice series+number
Type: string
number='PRAF101092'

date

The date when the invoice was created.
Text in YYYY-mm-dd 
date= '2020-11-11'

is_storno

The invoice represents a reversal of another invoice.
Type: integer
is_storno=1/is_storno=0

reversal_for

The invoice which was canceled through this invoice.
Type:string
reversal_for='PRAF101030'

supplier
name
Supplier name (legal name)
Type: string between 1 and 100 characters.
name=Dobre BA Shop SRL'


register_number
Registration number
Type: string between 1 and 50 characters.
register_number='J40/900/2000'


cif
Unique Identification Code
Type: string between 1 and 50 characters.
cif='10874881'


tax_code
VAT Number
Type: string between 1 and 50 characters.
tax_code='RO10874881'


social_capital
Subscribed and paid capital
Type: string between 1 and 50 characters.
social_capital='200 RON'


iban
Bank account
Type: string between 1 and 100 characters.
iban='RO02BTRLRONCRT00W6717503'


bank
Bank name
Type: string between 1 and 100 characters.
bank='BANCA TRANSILVANIA S.A.'


country 
Country
Type: string between 1 and 100 characters.
country='Romania'


address
Headquarters
Type: string between 1 and 255 characters.
address='Colentina 32, bl 2 sc 4 et 33
Bucuresti'

customer
name
Buyer name (legal name)
Type: string between 1 and 100 characters.
name='Test Test'


register_number
Registration number
Type: string between 1 and 50 characters.
register_number=' '


cif
Unique Identification Code
Type: string between 1 and 50 characters.
cif=''


tax_code
VAT Number
Type: string between 1 and 50 characters.
tax_code=''


iban
Bank account 
Type: string between 1 and 100 characters.
iban=''


bank
Bank name
Type: string between 1 and 100 characters.
bank=''


country
Country
Type: string between 1 and 100 characters.
country='RO'


address
Headquarters
Type: string between 1 and 255 characters.
address='Strada ABC, Bucuresti'

lines
product_name
Products/Services Description
Type: text
product_name='Usa de intrare, termopan , model Roxy white 110x210[61-110x210] '


unit_of_measure
Unit of measure
Type: string between 1 and 20 characters
unit_of_measure='Buc'


quantity
Quantity
Type: double
quatity=-1


unit_price
Unit value
Type: double
unit_price=1008.4


vat_rate
VAT Rate
Type: smallint
vat_rate=19


value
Product value (without VAT)
Type: integer
value=-1008.4


vat_value
VAT value
Type: integer
vat_value=-191.6

total_without_vat

Total invoice without VAT
Type: integer
total_without_vat=-1008.4

total_vat_value

Total invoice VAT value
Type: integer
total_vat_value=-191.6

total_with_vat

Total invoice with VAT
Type: integer
total_with_vat=-1200

currency

Invoice currency
Type: string
currency='RON'

