# Simplified Docker Compose for MagFlow ERP Core Services
# This is a minimal setup focusing on essential services

services:
  db:
    image: postgres:16.4-alpine
    container_name: magflow_pg
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-magflow}
      POSTGRES_USER: ${DB_USER:-app}
      POSTGRES_PASSWORD: ${DB_PASS:-app_password_change_me}
      POSTGRES_INITDB_ARGS: "--data-checksums --encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d magflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2.5-alpine
    container_name: magflow_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: magflow_worker
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0}
    command: celery -A app.worker:celery_app worker --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - .:/app

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: magflow_app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${DB_USER:-app}:${DB_PASS:-app_password_change_me}@db:5432/${DB_NAME:-magflow}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0
    ports:
      - "8001:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/full"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  postgres_data:
  redis_data:
