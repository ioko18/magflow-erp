#!/bin/bash
# Pre-commit hook to prevent SQL injection vulnerabilities
# Install: cp .git-hooks/pre-commit .git/hooks/pre-commit && chmod +x .git/hooks/pre-commit

set -e

echo "üîç Running pre-commit security checks..."

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Get list of Python files to be committed
PYTHON_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)

if [ -z "$PYTHON_FILES" ]; then
    echo -e "${GREEN}‚úì No Python files to check${NC}"
    exit 0
fi

echo "Checking files:"
echo "$PYTHON_FILES" | sed 's/^/  - /'
echo ""

ERRORS=0

# Check 1: SQL Injection via f-strings
echo "1Ô∏è‚É£  Checking for SQL injection vulnerabilities..."
for file in $PYTHON_FILES; do
    # Check for f-strings with SQL keywords
    if grep -n 'f".*\(SELECT\|INSERT\|UPDATE\|DELETE\|DROP\|CREATE\|ALTER\)' "$file" 2>/dev/null | grep -v "# nosec" | grep -v "# noqa"; then
        echo -e "${RED}‚ùå SQL injection risk in $file${NC}"
        echo "   Found f-string with SQL keyword. Use parameterized queries instead."
        ((ERRORS++))
    fi
    
    if grep -n "f'.*\(SELECT\|INSERT\|UPDATE\|DELETE\|DROP\|CREATE\|ALTER\)" "$file" 2>/dev/null | grep -v "# nosec" | grep -v "# noqa"; then
        echo -e "${RED}‚ùå SQL injection risk in $file${NC}"
        echo "   Found f-string with SQL keyword. Use parameterized queries instead."
        ((ERRORS++))
    fi
done

if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úì No SQL injection vulnerabilities detected${NC}"
fi

# Check 2: Hardcoded secrets
echo ""
echo "2Ô∏è‚É£  Checking for hardcoded secrets..."
SECRET_ERRORS=0
for file in $PYTHON_FILES; do
    # Skip test files
    if [[ $file == *"test_"* ]] || [[ $file == *"/tests/"* ]]; then
        continue
    fi
    
    # Check for hardcoded passwords (excluding settings and env vars)
    if grep -n 'password\s*=\s*["\'][^"'\'']*["\']' "$file" 2>/dev/null | grep -v "getenv\|settings\.\|Field(\|# nosec"; then
        echo -e "${YELLOW}‚ö† Potential hardcoded password in $file${NC}"
        echo "   Consider using environment variables or settings."
        ((SECRET_ERRORS++))
    fi
    
    # Check for hardcoded API keys
    if grep -n 'api_key\s*=\s*["\'][^"'\'']*["\']' "$file" 2>/dev/null | grep -v "getenv\|settings\.\|# nosec"; then
        echo -e "${YELLOW}‚ö† Potential hardcoded API key in $file${NC}"
        echo "   Consider using environment variables or settings."
        ((SECRET_ERRORS++))
    fi
done

if [ $SECRET_ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úì No hardcoded secrets detected${NC}"
else
    echo -e "${YELLOW}‚ö† Found $SECRET_ERRORS potential secrets (review recommended)${NC}"
fi

# Check 3: Dangerous functions
echo ""
echo "3Ô∏è‚É£  Checking for dangerous functions..."
DANGER_ERRORS=0
for file in $PYTHON_FILES; do
    # Check for eval/exec
    if grep -n '\(eval\|exec\)\s*(' "$file" 2>/dev/null | grep -v "# nosec" | grep -v "test_"; then
        echo -e "${RED}‚ùå Dangerous function (eval/exec) in $file${NC}"
        ((DANGER_ERRORS++))
        ((ERRORS++))
    fi
    
    # Check for pickle.loads without validation
    if grep -n 'pickle\.loads' "$file" 2>/dev/null | grep -v "# nosec" | grep -v "# Validated"; then
        echo -e "${YELLOW}‚ö† pickle.loads usage in $file${NC}"
        echo "   Ensure data source is trusted to prevent code execution."
        ((DANGER_ERRORS++))
    fi
done

if [ $DANGER_ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úì No dangerous functions detected${NC}"
fi

# Check 4: Python syntax
echo ""
echo "4Ô∏è‚É£  Checking Python syntax..."
SYNTAX_ERRORS=0
for file in $PYTHON_FILES; do
    if ! python3 -m py_compile "$file" 2>/dev/null; then
        echo -e "${RED}‚ùå Syntax error in $file${NC}"
        python3 -m py_compile "$file" || true
        ((SYNTAX_ERRORS++))
        ((ERRORS++))
    fi
done

if [ $SYNTAX_ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úì All files have valid syntax${NC}"
fi

echo ""
echo "================================================"

if [ $ERRORS -gt 0 ]; then
    echo -e "${RED}‚ùå Pre-commit checks failed with $ERRORS error(s)${NC}"
    echo ""
    echo "To bypass this check (not recommended), use:"
    echo "  git commit --no-verify"
    echo ""
    echo "To suppress specific warnings, add comments:"
    echo "  # nosec - for security warnings"
    echo "  # noqa - for linting warnings"
    exit 1
else
    echo -e "${GREEN}‚úì All pre-commit checks passed!${NC}"
    exit 0
fi
