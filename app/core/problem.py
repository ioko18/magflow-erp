"""Problem Details for HTTP APIs (RFC 9457) implementation."""

from __future__ import annotations

import json
from dataclasses import asdict, dataclass
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Type, TypeVar, Union

from fastapi import status
from pydantic import BaseModel, Field

T = TypeVar("T", bound="Problem")


class ProblemType(str, Enum):
    """Standard problem types as defined by RFC 9457."""

    ABOUT_BLANK = "about:blank"
    # Client errors (4xx)
    INVALID_REQUEST = "https://tools.ietf.org/html/rfc9110#section-15.5.1"
    UNAUTHORIZED = "https://tools.ietf.org/html/rfc9110#section-15.5.2"
    PAYMENT_REQUIRED = "https://tools.ietf.org/html/rfc9110#section-15.5.3"
    FORBIDDEN = "https://tools.ietf.org/html/rfc9110#section-15.5.4"
    NOT_FOUND = "https://tools.ietf.org/html/rfc9110#section-15.5.5"
    METHOD_NOT_ALLOWED = "https://tools.ietf.org/html/rfc9110#section-15.5.6"
    NOT_ACCEPTABLE = "https://tools.ietf.org/html/rfc9110#section-15.5.7"
    PROXY_AUTH_REQUIRED = "https://tools.ietf.org/html/rfc9110#section-15.5.8"
    REQUEST_TIMEOUT = "https://tools.ietf.org/html/rfc9110#section-15.5.9"
    CONFLICT = "https://tools.ietf.org/html/rfc9110#section-15.5.10"
    GONE = "https://tools.ietf.org/html/rfc9110#section-15.5.9"
    LENGTH_REQUIRED = "https://tools.ietf.org/html/rfc9110#section-15.5.11"
    PRECONDITION_FAILED = "https://tools.ietf.org/html/rfc9110#section-15.5.13"
    PAYLOAD_TOO_LARGE = "https://tools.ietf.org/html/rfc9110#section-15.5.12"
    URI_TOO_LONG = "https://tools.ietf.org/html/rfc9110#section-15.5.14"
    UNSUPPORTED_MEDIA_TYPE = "https://tools.ietf.org/html/rfc9110#section-15.5.17"
    RANGE_NOT_SATISFIABLE = "https://tools.ietf.org/html/rfc9110#section-15.5.17"
    EXPECTATION_FAILED = "https://tools.ietf.org/html/rfc9110#section-15.5.18"
    IM_A_TEAPOT = "https://tools.ietf.org/html/rfc2324#section-2.3.2"
    MISDIRECTED_REQUEST = "https://tools.ietf.org/html/rfc9110#section-15.5.20"
    UNPROCESSABLE_ENTITY = "https://tools.ietf.org/html/rfc9110#section-15.5.21"
    LOCKED = "https://tools.ietf.org/html/rfc4918#section-11.3"
    FAILED_DEPENDENCY = "https://tools.ietf.org/html/rfc4918#section-11.4"
    TOO_EARLY = "https://tools.ietf.org/html/rfc8470#section-5.2"
    UPGRADE_REQUIRED = "https://tools.ietf.org/html/rfc9110#section-15.5.22"
    PRECONDITION_REQUIRED = "https://tools.ietf.org/html/rfc6585#section-3"
    TOO_MANY_REQUESTS = "https://tools.ietf.org/html/rfc6585#section-4"
    REQUEST_HEADER_FIELDS_TOO_LARGE = "https://tools.ietf.org/html/rfc6585#section-5"
    UNAVAILABLE_FOR_LEGAL_REASONS = "https://tools.ietf.org/html/rfc7725#section-3"

    # Server errors (5xx)
    INTERNAL_SERVER_ERROR = "https://tools.ietf.org/html/rfc9110#section-15.6.1"
    NOT_IMPLEMENTED = "https://tools.ietf.org/html/rfc9110#section-15.6.2"
    BAD_GATEWAY = "https://tools.ietf.org/html/rfc9110#section-15.6.3"
    SERVICE_UNAVAILABLE = "https://tools.ietf.org/html/rfc9110#section-15.6.4"
    GATEWAY_TIMEOUT = "https://tools.ietf.org/html/rfc9110#section-15.6.5"
    HTTP_VERSION_NOT_SUPPORTED = "https://tools.ietf.org/html/rfc9110#section-15.6.6"
    VARIANT_ALSO_NEGOTIATES = "https://tools.ietf.org/html/rfc2295#section-8.1"
    INSUFFICIENT_STORAGE = "https://tools.ietf.org/html/rfc4918#section-11.5"
    LOOP_DETECTED = "https://tools.ietf.org/html/rfc5842#section-7.2"
    NOT_EXTENDED = "https://tools.ietf.org/html/rfc2774#section-7"
    NETWORK_AUTHENTICATION_REQUIRED = "https://tools.ietf.org/html/rfc6585#section-6"


@dataclass
class ErrorDetail:
    """Detailed error information for a specific field or context."""

    type: str
    message: str
    field: Optional[str] = None
    value: Any = None
    code: Optional[str] = None


class Problem(BaseModel):
    """RFC 9457 Problem Details for HTTP APIs.

    See: https://datatracker.ietf.org/doc/html/rfc9457
    """

    type: str = Field(
        default=ProblemType.ABOUT_BLANK,
        description="A URI reference [RFC3986] that identifies the problem type.",
    )
    title: str = Field(
        ...,
        description="A short, human-readable summary of the problem type.",
    )
    status: Optional[int] = Field(
        None,
        description="The HTTP status code ([RFC9110], Section 15) generated by the origin server for this occurrence of the problem.",
    )
    detail: Optional[str] = Field(
        None,
        description="A human-readable explanation specific to this occurrence of the problem.",
    )
    instance: Optional[str] = Field(
        None,
        description="A URI reference that identifies the specific occurrence of the problem.",
    )
    errors: List[ErrorDetail] = Field(
        default_factory=list,
        description="Additional error details for validation or business rule violations.",
    )
    timestamp: str = Field(
        default_factory=lambda: datetime.utcnow().isoformat(),
        description="When the error occurred, in ISO 8601 format.",
    )
    trace_id: Optional[str] = Field(
        None,
        description="A unique identifier for the request, used for correlation.",
        alias="traceId",
    )

    class Config:
        json_schema_extra = {
            "example": {
                "type": "https://example.com/probs/validation-error",
                "title": "Your request parameters didn't validate.",
                "status": 400,
                "detail": "The request contains invalid parameters. See 'errors' for details.",
                "instance": "/products/123",
                "timestamp": "2023-10-15T12:00:00Z",
                "traceId": "abc123",
                "errors": [
                    {
                        "type": "validation",
                        "message": "Value must be at least 1",
                        "field": "quantity",
                        "value": 0,
                        "code": "min_value",
                    },
                ],
            },
        }
        populate_by_name = True

    @classmethod
    def from_status(
        cls: Type[T],
        status_code: int,
        detail: Optional[str] = None,
        instance: Optional[str] = None,
        errors: Optional[List[ErrorDetail]] = None,
        trace_id: Optional[str] = None,
        **kwargs: Any,
    ) -> T:
        """Create a Problem instance from an HTTP status code."""
        title = status.HTTP_STATUS_CODES.get(status_code, "Unknown Error")
        problem_type = cls._get_problem_type(status_code)

        return cls(
            type=problem_type,
            title=title,
            status=status_code,
            detail=detail or title,
            instance=instance or "",
            errors=errors or [],
            trace_id=trace_id,
            **kwargs,
        )

    @classmethod
    def from_exception(
        cls: Type[T],
        exc: Exception,
        status_code: int = 500,
        instance: Optional[str] = None,
        trace_id: Optional[str] = None,
        **kwargs: Any,
    ) -> T:
        """Create a Problem instance from an exception."""
        return cls.from_status(
            status_code=status_code,
            detail=str(exc),
            instance=instance or "",
            trace_id=trace_id,
            **kwargs,
        )

    @classmethod
    def from_validation_errors(
        cls: Type[T],
        errors: List[Dict[str, Any]],
        instance: Optional[str] = None,
        trace_id: Optional[str] = None,
    ) -> T:
        """Create a Problem instance from Pydantic validation errors."""
        error_details = []

        for error in errors:
            loc = ".".join(str(item) for item in error["loc"] if item != "body")
            error_details.append(
                ErrorDetail(
                    type="validation",
                    message=error["msg"],
                    field=loc or None,
                    value=error.get("value"),
                    code=error.get("type"),
                ),
            )

        return cls.from_status(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            detail="Validation failed. See 'errors' for details.",
            instance=instance or "",
            errors=error_details,
            trace_id=trace_id,
        )

    @staticmethod
    def _get_problem_type(status_code: int) -> str:
        """Get the appropriate problem type URI for a status code."""
        # For now, default to about:blank; specific mappings can be added if needed
        return ProblemType.ABOUT_BLANK.value

    def to_dict(self) -> Dict[str, Any]:
        """Convert the Problem to a dictionary, excluding None values."""
        data = asdict(self)
        return {k: v for k, v in data.items() if v is not None}

    def to_json(self, **kwargs: Any) -> str:
        """Serialize the Problem to a JSON string."""
        return json.dumps(self.to_dict(), **kwargs)

    @classmethod
    def from_dict(cls: Type[T], data: Dict[str, Any]) -> T:
        """Create a Problem from a dictionary."""
        return cls(**data)

    @classmethod
    def from_json(cls: Type[T], json_str: str) -> T:
        """Create a Problem from a JSON string."""
        return cls.from_dict(json.loads(json_str))


# Common problem instances for standard HTTP errors
class Problems:
    """Factory for common problem instances."""

    @staticmethod
    def bad_request(
        detail: Optional[str] = None,
        instance: Optional[str] = None,
        errors: Optional[List[ErrorDetail]] = None,
        trace_id: Optional[str] = None,
    ) -> Problem:
        """400 Bad Request."""
        return Problem.from_status(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=detail
            or "The request could not be understood or was missing required parameters.",
            instance=instance,
            errors=errors,
            trace_id=trace_id,
        )

    @staticmethod
    def unauthorized(
        detail: Optional[str] = None,
        instance: Optional[str] = None,
        trace_id: Optional[str] = None,
    ) -> Problem:
        """401 Unauthorized."""
        return Problem.from_status(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=detail
            or "Authentication failed or user doesn't have permissions for the requested operation.",
            instance=instance,
            trace_id=trace_id,
        )

    @staticmethod
    def forbidden(
        detail: Optional[str] = None,
        instance: Optional[str] = None,
        trace_id: Optional[str] = None,
    ) -> Problem:
        """403 Forbidden."""
        return Problem.from_status(
            status_code=status.HTTP_403_FORBIDDEN,
            detail=detail or "You don't have permission to access this resource.",
            instance=instance,
            trace_id=trace_id,
        )

    @staticmethod
    def not_found(
        resource: Optional[str] = None,
        id: Optional[Union[str, int]] = None,
        instance: Optional[str] = None,
        trace_id: Optional[str] = None,
    ) -> Problem:
        """404 Not Found."""
        detail = "The requested resource was not found."
        if resource and id is not None:
            detail = f"{resource} with ID '{id}' not found."
        elif resource:
            detail = f"{resource} not found."

        return Problem.from_status(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=detail,
            instance=instance,
            trace_id=trace_id,
        )

    @staticmethod
    def conflict(
        detail: Optional[str] = None,
        instance: Optional[str] = None,
        trace_id: Optional[str] = None,
    ) -> Problem:
        """409 Conflict."""
        return Problem.from_status(
            status_code=status.HTTP_409_CONFLICT,
            detail=detail
            or "A resource with this ID already exists or is in an inconsistent state.",
            instance=instance,
            trace_id=trace_id,
        )

    @staticmethod
    def unprocessable_entity(
        detail: Optional[str] = None,
        errors: Optional[List[ErrorDetail]] = None,
        instance: Optional[str] = None,
        trace_id: Optional[str] = None,
    ) -> Problem:
        """422 Unprocessable Entity."""
        return Problem.from_status(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            detail=detail
            or "The request was well-formed but was unable to be followed due to semantic errors.",
            errors=errors or [],
            instance=instance,
            trace_id=trace_id,
        )

    @staticmethod
    def too_many_requests(
        retry_after: Optional[int] = None,
        detail: Optional[str] = None,
        instance: Optional[str] = None,
        trace_id: Optional[str] = None,
    ) -> Problem:
        """429 Too Many Requests."""
        problem = Problem.from_status(
            status_code=status.HTTP_429_TOO_MANY_REQUESTS,
            detail=detail or "Too many requests, please try again later.",
            instance=instance,
            trace_id=trace_id,
        )

        if retry_after is not None:
            problem.retry_after = retry_after

        return problem

    @staticmethod
    def internal_server_error(
        detail: Optional[str] = None,
        instance: Optional[str] = None,
        trace_id: Optional[str] = None,
    ) -> Problem:
        """500 Internal Server Error."""
        return Problem.from_status(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=detail or "An unexpected error occurred on the server.",
            instance=instance,
            trace_id=trace_id,
        )

    @staticmethod
    def service_unavailable(
        retry_after: Optional[int] = None,
        detail: Optional[str] = None,
        instance: Optional[str] = None,
        trace_id: Optional[str] = None,
    ) -> Problem:
        """503 Service Unavailable."""
        problem = Problem.from_status(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail=detail
            or "The service is currently unavailable. Please try again later.",
            instance=instance,
            trace_id=trace_id,
        )

        if retry_after is not None:
            problem.retry_after = retry_after

        return problem
