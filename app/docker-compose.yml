
x-common-env: &common-env
  TZ: ${TZ:-UTC}
  LANG: en_US.UTF-8
  PYTHONUNBUFFERED: 1
  PYTHONFAULTHANDLER: 1
  PYTHONDONTWRITEBYTECODE: 1

services:
  db:
    image: postgres:16-alpine
    container_name: magflow_pg
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-app} -d ${DB_NAME:-magflow}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Environment variables will be defined in the environment section below
    
    # Mount custom configuration and data
    volumes:
      - ./docker/postgres/postgresql.conf:/var/lib/postgresql/data/postgresql.conf:ro
      - ./certs/postgres.crt:/etc/ssl/certs/postgresql/server.crt:ro
      - ./certs/postgres.key:/etc/ssl/private/postgresql/server.key:ro
      - ./certs/ca/ca.crt:/etc/ssl/certs/postgresql/ca.crt:ro
      - ./docker/postgres/configure_ssl.sh:/docker-entrypoint-initdb.d/configure_ssl.sh:ro
      - pg_data:/var/lib/postgresql/data
    command: postgres -c config_file=/var/lib/postgresql/data/postgresql.conf
    environment:
      <<: *common-env
      # Database configuration
      POSTGRES_DB: ${DB_NAME:-magflow}
      POSTGRES_USER: ${DB_USER:-app}
      POSTGRES_PASSWORD: ${DB_PASS:-app_password_change_me}
      POSTGRES_INITDB_WALDIR: /var/lib/postgresql/data/pg_wal
      POSTGRES_INITDB_ARGS: "--data-checksums --encoding=UTF8 --locale=C.UTF-8"
      POSTGRES_HOST_AUTH_METHOD: md5
      PGDATA: /var/lib/postgresql/data/pgdata
      
      # Performance tuning
      EFFECTIVE_CACHE_SIZE: 3GB
      CHECKPOINT_COMPLETION_TARGET: 0.9
      MAX_WAL_SIZE: 2GB
      MIN_WAL_SIZE: 1GB
      LOGGING_COLLECTOR: 'on'
      LOG_LINE_PREFIX: '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
      LOG_CHECKPOINTS: 'on'
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  pgbouncer:
    build:
      context: .
      dockerfile: docker/pgbouncer/Dockerfile
    platform: linux/amd64
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=$${DB_PASS:-app_password_change_me} psql -h 127.0.0.1 -p 6432 -U $${DB_USER:-app} -d $${DB_NAME:-magflow} -c 'SELECT 1;' -t"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    container_name: magflow_pgbouncer
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    user: "1001"
    volumes:
      - ./certs/pgbouncer.crt:/opt/bitnami/pgbouncer/certs/server.crt:ro
      - ./certs/pgbouncer.key:/opt/bitnami/pgbouncer/certs/server.key:ro
      - ./certs/ca/ca.crt:/opt/bitnami/pgbouncer/certs/ca.crt:ro
    environment:
      <<: *common-env
      POSTGRESQL_HOST: db
      POSTGRESQL_PORT: 5432
      POSTGRESQL_DATABASE: ${DB_NAME:-magflow}
      POSTGRESQL_USERNAME: ${DB_USER:-app}
      POSTGRESQL_PASSWORD: ${DB_PASS:-app_password_change_me}
      PGBOUNCER_AUTH_TYPE: md5
      PGBOUNCER_AUTH_USER: ${DB_USER:-app}
      PGBOUNCER_AUTH_QUERY: "SELECT usename, passwd FROM pg_shadow WHERE usename=$1"
      PGBOUNCER_POOL_MODE: transaction
      PGBOUNCER_MAX_CLIENT_CONN: 1000
      PGBOUNCER_DEFAULT_POOL_SIZE: 100
      PGBOUNCER_MIN_POOL_SIZE: 10
      PGBOUNCER_RESERVE_POOL_SIZE: 10
      PGBOUNCER_IGNORE_STARTUP_PARAMETERS: extra_float_digits
      PGBOUNCER_QUERY_WAIT_TIMEOUT: 60
      PGBOUNCER_IDLE_TRANSACTION_TIMEOUT: 0
      PGBOUNCER_SERVER_RESET_QUERY: DISCARD ALL
      PGBOUNCER_SERVER_RESET_QUERY_ALWAYS: 1
      PGBOUNCER_SSL: on
      PGBOUNCER_SSL_CERT_FILE: /opt/bitnami/pgbouncer/certs/server.crt
      PGBOUNCER_SSL_KEY_FILE: /opt/bitnami/pgbouncer/certs/server.key
      PGBOUNCER_SSL_CA_FILE: /opt/bitnami/pgbouncer/certs/ca.crt
      PGBOUNCER_SSL_PREFER_SERVER_CIPHERS: 'on'
      PGBOUNCER_SSL_ECDH_CURVE: 'prime256v1'
      PGBOUNCER_LOG_CONNECTIONS: 1
      PGBOUNCER_LOG_DISCONNECTIONS: 1
      PGBOUNCER_LOG_POOLER_ERRORS: 1
      PGBOUNCER_STATS_PERIOD: 60
      PGBOUNCER_VERBOSITY: 1
    ports:
      - "6432:6432"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          memory: 256M

  redis:
    image: redis:7-alpine
    container_name: magflow_redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: [
      "redis-server",
      "--appendonly", "yes",
      "--requirepass", "${REDIS_PASSWORD:-change_me_please}"
    ]
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          memory: 256M

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: magflow_app
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      <<: *common-env
      # Application settings
      ENV: ${ENV:-development}
      DEBUG: ${DEBUG:-true}
      SECRET_KEY: ${SECRET_KEY:-change_this_in_production}
      
      # Database settings
      DATABASE_URL: postgresql://${DB_USER:-app}:${DB_PASS:-app_password_change_me}@pgbouncer:6432/${DB_NAME:-magflow}
      DB_POOL_MIN: ${DB_POOL_MIN:-2}
      DB_POOL_MAX: ${DB_POOL_MAX:-10}
      
      # Redis settings
      REDIS_URL: redis://redis:6379/0
      
      # JWT settings
      JWT_ALGORITHM: ${JWT_ALGORITHM:-RS256}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-15}
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: ${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      JWT_PUBLIC_KEY: ${JWT_PUBLIC_KEY:-/app/jwt-keys/public.pem}
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY:-/app/jwt-keys/private.pem}
      
      # CORS settings
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-["*"]}
    ports:
      - "8000:8000"
      - "8010:8010"  # For health checks and metrics
      - "5678:5678"  # For debugpy
    volumes:
      - .:/app
      - ./jwt-keys:/app/jwt-keys
    healthcheck:
      test: ["CMD", "/app/scripts/healthcheck.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
      # The container has 30 seconds to start before the first health check
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          memory: 512M

  prometheus:
    image: prom/prometheus:latest
    container_name: magflow_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: magflow_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  pg_data:
    name: magflow_pg_data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgres

  redis_data:
    name: magflow_redis_data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/redis

  prometheus_data:
    name: magflow_prometheus_data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/prometheus

  grafana_data:
    name: magflow_grafana_data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/grafana

networks:
  default:
    name: magflow_network
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
      com.docker.network.driver.mtu: 1500
