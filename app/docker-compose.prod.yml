# MagFlow Production Deployment

version: '3.8'

services:
  # Application
  app:
    image: magflow/magflow-api:latest
    container_name: magflow-app
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=magflow
      - DB_USER=magflow_user
      - DB_PASS=${DB_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
      - OTEL_SERVICE_NAME=magflow-api
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - pgbouncer
    volumes:
      - ./logs:/app/logs
      - ./jwt-keys:/app/jwt-keys:ro
    networks:
      - magflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database
  db:
    image: postgres:16-alpine
    container_name: magflow-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=magflow
      - POSTGRES_USER=magflow_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - magflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U magflow_user -d magflow"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Connection Pooler
  pgbouncer:
    image: brainsam/pgbouncer:latest
    container_name: magflow-pgbouncer
    restart: unless-stopped
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=magflow_user
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=magflow
      - PGBOUNCER_POOL_MODE=transaction
      - PGBOUNCER_MAX_CLIENT_CONN=1000
      - PGBOUNCER_DEFAULT_POOL_SIZE=20
      - PGBOUNCER_MIN_POOL_SIZE=5
    ports:
      - "6432:6432"
    depends_on:
      - db
    networks:
      - magflow-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: magflow-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - magflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: magflow-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - magflow-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: magflow-otel-collector
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
    networks:
      - magflow-network
    depends_on:
      - jaeger

  # Jaeger for Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: magflow-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    networks:
      - magflow-network

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: magflow-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - magflow-network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: magflow-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - magflow-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  magflow-network:
    driver: bridge

