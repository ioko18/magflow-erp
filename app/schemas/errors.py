from enum import Enum
from typing import Any

from pydantic import BaseModel, ConfigDict, Field, HttpUrl

# Type variable for generic problem type (removed due to redefinition)
# ProblemType = TypeVar("ProblemType", bound="Problem")


class Problem(BaseModel):
    """RFC 9457 Problem Details for HTTP APIs

    See: https://datatracker.ietf.org/doc/html/rfc9457
    """

    type: HttpUrl | None = Field(
        default="about:blank",
        description="A URI reference that identifies the problem type.",
    )
    title: str | None = Field(
        default=None,
        description="A short, human-readable summary of the problem type.",
    )
    status: int | None = Field(
        default=None,
        description=(
            "The HTTP status code generated by the origin server for this occurrence "
            "of the problem."
        ),
    )
    detail: str | None = Field(
        default=None,
        description=(
            "A human-readable explanation specific to this occurrence of the problem."
        ),
    )
    instance: HttpUrl | None = Field(
        default=None,
        description="A URI reference that identifies the specific occurrence of the problem.",
    )

    # Extension members
    errors: list[dict[str, Any]] | None = Field(
        default=None,
        description="Additional error details for validation errors",
    )

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "type": "https://example.com/probs/validation-error",
                "title": "Validation Error",
                "status": 400,
                "detail": "Your request contains invalid parameters",
                "instance": "/api/v1/resource/123",
                "errors": [{"field": "email", "message": "Invalid email format"}],
            },
        },
    )


# Common problem types as per RFC 9457
class ProblemType(str, Enum):
    ABOUT_BLANK = "about:blank"
    VALIDATION_ERROR = "https://example.com/probs/validation-error"
    UNAUTHORIZED = "https://example.com/probs/unauthorized"
    FORBIDDEN = "https://example.com/probs/forbidden"
    NOT_FOUND = "https://example.com/probs/not-found"
    CONFLICT = "https://example.com/probs/conflict"
    TOO_MANY_REQUESTS = "https://example.com/probs/too-many-requests"
    INTERNAL_ERROR = "https://example.com/probs/internal-server-error"
    SERVICE_UNAVAILABLE = "https://example.com/probs/service-unavailable"


# Common problem instances
class ValidationProblem(Problem):
    type: str = ProblemType.VALIDATION_ERROR
    status: int = 400
    title: str = "Validation Error"
    errors: list[dict[str, Any]]

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "type": ProblemType.VALIDATION_ERROR,
                "title": "Validation Error",
                "status": 400,
                "detail": "Your request contains invalid parameters",
                "errors": [
                    {"field": "email", "message": "Invalid email format"},
                    {"field": "password", "message": "Password too short"},
                ],
            },
        },
    )


class UnauthorizedProblem(Problem):
    type: str = ProblemType.UNAUTHORIZED
    status: int = 401
    title: str = "Unauthorized"

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "type": ProblemType.UNAUTHORIZED,
                "title": "Unauthorized",
                "status": 401,
                "detail": "Authentication required",
                "instance": "/api/v1/secure-resource",
            },
        },
    )


class ForbiddenProblem(Problem):
    type: str = ProblemType.FORBIDDEN
    status: int = 403
    title: str = "Forbidden"

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "type": ProblemType.FORBIDDEN,
                "title": "Forbidden",
                "status": 403,
                "detail": "You don't have permission to access this resource",
                "instance": "/api/v1/admin",
            },
        },
    )


class NotFoundProblem(Problem):
    type: str = ProblemType.NOT_FOUND
    status: int = 404
    title: str = "Not Found"

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "type": ProblemType.NOT_FOUND,
                "title": "Not Found",
                "status": 404,
                "detail": "The requested resource was not found",
                "instance": "/api/v1/resource/999",
            },
        },
    )


class ConflictProblem(Problem):
    type: str = ProblemType.CONFLICT
    status: int = 409
    title: str = "Conflict"

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "type": ProblemType.CONFLICT,
                "title": "Conflict",
                "status": 409,
                "detail": "Resource already exists",
                "instance": "/api/v1/resource/123",
            },
        },
    )


class TooManyRequestsProblem(Problem):
    type: str = ProblemType.TOO_MANY_REQUESTS
    status: int = 429
    title: str = "Too Many Requests"

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "type": ProblemType.TOO_MANY_REQUESTS,
                "title": "Too Many Requests",
                "status": 429,
                "detail": "Rate limit exceeded. Try again in 60 seconds.",
                "instance": "/api/v1/endpoint",
            },
        },
    )


class InternalServerErrorProblem(Problem):
    type: str = ProblemType.INTERNAL_ERROR
    status: int = 500
    title: str = "Internal Server Error"

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "type": ProblemType.INTERNAL_ERROR,
                "title": "Internal Server Error",
                "status": 500,
                "detail": "An unexpected error occurred",
                "instance": "/api/v1/endpoint",
            },
        },
    )


class ServiceUnavailableProblem(Problem):
    type: str = ProblemType.SERVICE_UNAVAILABLE
    status: int = 503
    title: str = "Service Unavailable"

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "type": ProblemType.SERVICE_UNAVAILABLE,
                "title": "Service Unavailable",
                "status": 503,
                "detail": "Service is temporarily unavailable. Please try again later.",
                "instance": "/api/v1/endpoint",
            },
        },
    )


# Backward compatibility with existing code
class ErrorDetail(BaseModel):
    """Legacy error detail for backward compatibility"""

    type: str = Field(..., description="Error type/identifier")
    msg: str = Field(..., description="Human-readable error message")
    loc: list[str] | None = Field(
        None,
        description="Location of the error in the request (e.g., ['body', 'field_name'])",
    )
    ctx: dict[str, Any] | None = Field(
        None,
        description="Additional context about the error",
    )


class HTTPError(BaseModel):
    """Legacy error response model for backward compatibility"""

    detail: list[ErrorDetail]


# Common error responses
HTTP_400_BAD_REQUEST = {
    "description": "Bad Request",
    "model": HTTPError,
    "content": {
        "application/json": {
            "example": {
                "detail": [
                    {
                        "type": "value_error",
                        "msg": "Invalid value provided",
                        "loc": ["body", "field_name"],
                        "ctx": {"error": "Expected type: string"},
                    },
                ],
            },
        },
    },
}

HTTP_401_UNAUTHORIZED = {
    "description": "Unauthorized",
    "model": HTTPError,
    "content": {
        "application/json": {
            "example": {
                "detail": [{"type": "not_authenticated", "msg": "Not authenticated"}],
            },
        },
    },
}

HTTP_403_FORBIDDEN = {
    "description": "Forbidden",
    "model": HTTPError,
    "content": {
        "application/json": {
            "example": {
                "detail": [
                    {"type": "permission_denied", "msg": "Not enough permissions"},
                ],
            },
        },
    },
}

HTTP_404_NOT_FOUND = {
    "description": "Not Found",
    "model": HTTPError,
    "content": {
        "application/json": {
            "example": {"detail": [{"type": "not_found", "msg": "Resource not found"}]},
        },
    },
}

HTTP_422_VALIDATION_ERROR = {
    "description": "Validation Error",
    "model": HTTPError,
    "content": {
        "application/json": {
            "example": {
                "detail": [
                    {
                        "loc": ["body", "field_name"],
                        "msg": "field required",
                        "type": "value_error.missing",
                    },
                ],
            },
        },
    },
}

HTTP_500_INTERNAL_SERVER_ERROR = {
    "description": "Internal Server Error",
    "model": HTTPError,
    "content": {
        "application/json": {
            "example": {
                "detail": [
                    {
                        "type": "internal_server_error",
                        "msg": "An unexpected error occurred",
                    },
                ],
            },
        },
    },
}

# Common error responses dictionary
ERROR_RESPONSES = {
    400: HTTP_400_BAD_REQUEST,
    401: HTTP_401_UNAUTHORIZED,
    403: HTTP_403_FORBIDDEN,
    404: HTTP_404_NOT_FOUND,
    422: HTTP_422_VALIDATION_ERROR,
    500: HTTP_500_INTERNAL_SERVER_ERROR,
}
