
x-common-env: &common-env
  TZ: ${TZ:-UTC}
  LANG: en_US.UTF-8
  PYTHONUNBUFFERED: 1
  PYTHONFAULTHANDLER: 1
  PYTHONDONTWRITEBYTECODE: 1

services:
  db:
    image: postgres:16.4-alpine
    container_name: magflow_pg
    restart: unless-stopped
    mem_limit: 1g
    cpus: "0.75"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-app} -d ${DB_NAME:-magflow}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - pg_data:/var/lib/postgresql/data
    environment:
      <<: *common-env
      POSTGRES_DB: ${DB_NAME:-magflow}
      POSTGRES_USER: ${DB_USER:-app}
      POSTGRES_PASSWORD: ${DB_PASS:-app_password_change_me}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"

  pgbouncer:
    build:
      context: .
      dockerfile: docker/pgbouncer/Dockerfile
    # Use native platform for better performance on Apple Silicon/ARM
    healthcheck:
      test: ["CMD-SHELL", "bash -lc '</dev/tcp/127.0.0.1/6432'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    container_name: magflow_pgbouncer
    restart: unless-stopped
    mem_limit: 128m
    cpus: "0.25"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    depends_on:
      db:
        condition: service_healthy
    # Custom pgbouncer.ini is baked into the image
    environment:
      <<: *common-env
      POSTGRESQL_HOST: db
      POSTGRESQL_DATABASE: ${DB_NAME:-magflow}
      POSTGRESQL_USERNAME: ${DB_USER:-app}
      POSTGRESQL_PASSWORD: ${DB_PASS:-app_password_change_me}
      PGBOUNCER_DISABLE_CONF_REWRITING: 'yes'
    ports:
      - "6432:6432"

  redis:
    image: redis:7.2.5-alpine
    container_name: magflow_redis
    restart: unless-stopped
    mem_limit: 256m
    cpus: "0.25"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_password_change_me}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD:-redis_password_change_me}"]
    volumes:
      - redis_data:/data

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: magflow_app
    restart: unless-stopped
    mem_limit: 512m
    cpus: "0.50"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      pgbouncer:
        condition: service_healthy
    env_file:
      - .env
    environment:
      <<: *common-env
      DATABASE_URL: postgresql+asyncpg://${DB_USER:-app}:${DB_PASS:-app_password_change_me}@pgbouncer:6432/postgres
      # Performance optimizations
      UVICORN_WORKERS: 1
      UVICORN_HOST: 0.0.0.0
      UVICORN_PORT: 8000
      UVICORN_LOOP: uvloop
      UVICORN_HTTP: httptools
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/full"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: magflow_worker
    restart: unless-stopped
    mem_limit: 512m
    cpus: "0.50"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    profiles:
      - ops
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      <<: *common-env
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0}
      # Performance optimizations
      CELERY_WORKER_PREFETCH_MULTIPLIER: 1
      CELERY_WORKER_MAX_TASKS_PER_CHILD: 1000
      CELERY_TASK_ACKS_LATE: 'true'
    command: ["bash", "-lc", "celery -A app.worker.celery_app worker -Q default -c 2 --loglevel=INFO"]
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.worker.celery_app inspect ping -d celery@$$HOSTNAME | grep -q pong"]
      interval: 30s
      timeout: 10s
      retries: 5
    stop_grace_period: 30s

  flower:
    image: mher/flower:2.0.1
    container_name: magflow_flower
    restart: unless-stopped
    profiles:
      - ops
    environment:
      - FLOWER_PORT=5555
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0}
    ports:
      - "5555:5555"
    depends_on:
      - worker

  prometheus:
    image: prom/prometheus:v2.55.0
    container_name: magflow_prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    depends_on:
      - app

  grafana:
    image: grafana/grafana:10.4.3
    container_name: magflow_grafana
    restart: unless-stopped
    profiles:
      - monitoring
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-change_me}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    depends_on:
      - prometheus

  beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: magflow_beat
    restart: unless-stopped
    mem_limit: 256m
    cpus: "0.25"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    profiles:
      - ops
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      <<: *common-env
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0}
    command: ["bash", "-lc", "celery -A app.worker.celery_app beat --loglevel=INFO --pidfile=/tmp/celerybeat.pid"]
    healthcheck:
      test: ["CMD-SHELL", "grep -qa 'celery' /proc/1/cmdline && grep -qa 'beat' /proc/1/cmdline"]
      interval: 30s
      timeout: 10s
      retries: 5
    stop_grace_period: 30s
    networks:
      - default


volumes:
  pg_data:
    name: magflow_pg_data
  redis_data:
    name: magflow_redis_data
  prometheus_data:
    name: magflow_prometheus_data
  grafana_data:
    name: magflow_grafana_data
  pgbouncer_data:
    name: magflow_pgbouncer_data

networks:
  default:
    name: magflow_network
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
      com.docker.network.driver.mtu: 1500
